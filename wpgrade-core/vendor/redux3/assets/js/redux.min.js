/*!
 * jQuery Cookie Plugin v1.3.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as anonymous module.
		define(['jquery'], factory);
	} else {
		// Browser globals.
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function raw(s) {
		return s;
	}

	function decoded(s) {
		return decodeURIComponent(s.replace(pluses, ' '));
	}

	function converted(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}
		try {
			return config.json ? JSON.parse(s) : s;
		} catch(er) {}
	}

	var config = $.cookie = function (key, value, options) {

		// write
		if (value !== undefined) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setDate(t.getDate() + days);
			}

			value = config.json ? JSON.stringify(value) : String(value);

			return (document.cookie = [
				config.raw ? key : encodeURIComponent(key),
				'=',
				config.raw ? value : encodeURIComponent(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// read
		var decode = config.raw ? raw : decoded;
		var cookies = document.cookie.split('; ');
		var result = key ? undefined : {};
		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = decode(parts.join('='));

			if (key && key === name) {
				result = converted(cookie);
				break;
			}

			if (!key) {
				result[name] = converted(cookie);
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) !== undefined) {
			// Must not alter options, thus extending a fresh object...
			$.cookie(key, '', $.extend({}, options, { expires: -1 }));
			return true;
		}
		return false;
	};

}));;/*
 *	TypeWatch 2.2
 *
 *	Examples/Docs: github.com/dennyferra/TypeWatch
 *
 *  Copyright(c) 2013
 *	Denny Ferrassoli - dennyferra.com
 *   Charles Christolini
 *
 *  Dual licensed under the MIT and GPL licenses:
 *  http://www.opensource.org/licenses/mit-license.php
 *  http://www.gnu.org/licenses/gpl.html
 */

(function(jQuery) {
	jQuery.fn.typeWatch = function(o) {
		// The default input types that are supported
		var _supportedInputTypes =
			['TEXT', 'TEXTAREA', 'PASSWORD', 'TEL', 'SEARCH', 'URL', 'EMAIL', 'DATETIME', 'DATE', 'MONTH', 'WEEK', 'TIME', 'DATETIME-LOCAL', 'NUMBER', 'RANGE'];

		// Options
		var options = jQuery.extend({
			wait: 750,
			callback: function() { },
			highlight: true,
			captureLength: 2,
			inputTypes: _supportedInputTypes
		}, o);

		function checkElement(timer, override) {
			var value = jQuery(timer.el).val();

			// Fire if text >= options.captureLength AND text != saved text OR if override AND text >= options.captureLength
			if ( ( value.length >= options.captureLength && value.toUpperCase() !== timer.text ) || ( override && value.length >= options.captureLength ) ) {
				timer.text = value.toUpperCase();
				timer.cb.call(timer.el, value);
			}
		}

		function watchElement(elem) {
			var elementType = elem.type.toUpperCase();
			if (jQuery.inArray(elementType, options.inputTypes) >= 0) {

				// Allocate timer element
				var timer = {
					timer: null,
					text: jQuery(elem).val().toUpperCase(),
					cb: options.callback,
					el: elem,
					wait: options.wait
				};

				// Set focus action (highlight)
				if (options.highlight) {
					jQuery(elem).focus(
						function() {
							this.select();
						});
				}

				// Key watcher / clear and reset the timer
				var startWatch = function(evt) {
					var timerWait = timer.wait;
					var overrideBool = false;
					var evtElementType = this.type.toUpperCase();

					// If enter key is pressed and not a TEXTAREA and matched inputTypes
					if (typeof evt.keyCode !== 'undefined' && evt.keyCode === 13 && evtElementType !== 'TEXTAREA' && jQuery.inArray(evtElementType, options.inputTypes) >= 0) {
						timerWait = 1;
						overrideBool = true;
					}

					var timerCallbackFx = function() {
						checkElement(timer, overrideBool);
					};

					// Clear timer					
					clearTimeout(timer.timer);
					timer.timer = setTimeout(timerCallbackFx, timerWait);
				};

				jQuery(elem).on('keydown paste cut input', startWatch);
			}
		}

		// Watch Each Element
		return this.each(function() {
			watchElement(this);
		});

	};
})(jQuery);;(function(a,b){var c="ui-state-active",d="ui-state-hover",e="ui-state-disabled",f=a.ui.keyCode,g=f.UP,h=f.DOWN,i=f.RIGHT,j=f.LEFT,k=f.PAGE_UP,l=f.PAGE_DOWN,m=f.HOME,n=f.END,o=a.browser.msie,p=a.browser.mozilla?"DOMMouseScroll":"mousewheel",q=".uispinner",r=[g,h,i,j,k,l,m,n,f.BACKSPACE,f.DELETE,f.TAB],s;a.widget("ui.spinner",{options:{min:null,max:null,allowNull:false,group:"",point:".",prefix:"",suffix:"",places:null,defaultStep:1,largeStep:10,mouseWheel:true,increment:"slow",className:null,showOn:"always",width:95,upIconClass:"ui-icon-triangle-1-n",downIconClass:"ui-icon-triangle-1-s",format:function(a,b){var c=this,d=/(\d+)(\d{3})/,e=(isNaN(a)?0:Math.abs(a)).toFixed(b)+"";for(e=e.replace(".",c.point);d.test(e)&&c.group;e=e.replace(d,"$1"+c.group+"$2")){}return(a<0?"-":"")+c.prefix+e+c.suffix},parse:function(a){var b=this;if(b.group==".")a=a.replace(".","");if(b.point!=".")a=a.replace(b.point,".");return parseFloat(a.replace(/[^0-9\-\.]/g,""))}},_create:function(){var a=this,b=a.element,c=b.attr("type");if(!b.is("input")||c!="text"&&c!="number"){console.error("Invalid target for ui.spinner");return}a._procOptions(true);a._createButtons(b);if(!b.is(":enabled"))a.disable()},_createButtons:function(b){function R(){if(L){a(this).removeClass(c);p._stopSpin();L=false}return false}function Q(){if(!t.disabled){var b=p.element[0],d=this===C?1:-1;b.focus();b.select();a(this).addClass(c);L=true;p._startSpin(d)}return false}function P(a){function b(){G=0;a()}if(G){if(a===H)return;clearTimeout(G)}H=a;G=setTimeout(b,100)}function O(a,b){if(K)return false;var c=String.fromCharCode(b||a),d=p.options;if(c>="0"&&c<="9"||c=="-")return false;if(p.places>0&&c==d.point||c==d.group)return false;return true}function N(a){for(var b=0;b<r.length;b++)if(r[b]==a)return true;return false}function e(a){return a=="auto"?0:parseInt(a)}var p=this,t=p.options,u=t.className,v=t.width,w=t.showOn,x=a.support.boxModel,y=b.outerHeight(),z=p.oMargin=e(b.css("margin-right")),A=p.wrapper=b.wrap('<span class="spinner-wrpr" />').css({width:(p.oWidth=x?b.width():b.outerWidth())-v,marginRight:"30px",marginLeft:"30px",textAlign:"center","float":"none",marginTop:0}).after('<span class="ui-spinner ui-widget"></span>').next(),B=p.btnContainer=a('<div class="ui-spinner-buttons">'+'<div class="ui-spinner-up ui-spinner-button ui-state-default ui-corner-tr"><span class="ui-icon '+t.upIconClass+'"> </span></div>'+'<div class="ui-spinner-down ui-spinner-button ui-state-default ui-corner-br"><span class="ui-icon '+t.downIconClass+'"> </span></div>'+"</div>"),C,D,E,F,G,H,I,J,K,L,M=b[0].dir=="rtl";if(u)A.addClass(u);A.append(B.css({height:y,left:0,top:0}));E=p.buttons=B.find(".ui-spinner-button");E.css({width:"30px",height:y-(x?E.outerHeight()-E.height():0)});E.eq(0).css({right:"0"});E.eq(1).css({left:"0"});C=E[0];D=E[1];F=E.find(".ui-icon");B.width("105px");if(w!="always")B.css("opacity",0);if(w=="hover"||w=="both")E.add(b).bind("mouseenter"+q,function(){P(function(){I=true;if(!p.focused||w=="hover")p.showButtons()})}).bind("mouseleave"+q,function S(){P(function(){I=false;if(!p.focused||w=="hover")p.hideButtons()})});E.hover(function(){p.buttons.removeClass(d);if(!t.disabled)a(this).addClass(d)},function(){a(this).removeClass(d)}).mousedown(Q).mouseup(R).mouseout(R);if(o)E.dblclick(function(){if(!t.disabled){p._change();p._doSpin((this===C?1:-1)*t.step)}return false}).bind("selectstart",function(){return false});b.bind("keydown"+q,function(b){var d,e,f,o=b.keyCode;if(b.ctrl||b.alt)return true;if(N(o))K=true;if(J)return false;switch(o){case g:case k:d=1;e=o==k;break;case h:case l:d=-1;e=o==l;break;case i:case j:d=o==i^M?1:-1;break;case m:f=p.options.min;if(f!=null)p._setValue(f);return false;case n:f=p.options.max;f=p.options.max;if(f!=null)p._setValue(f);return false}if(d){if(!J&&!t.disabled){keyDir=d;a(d>0?C:D).addClass(c);J=true;p._startSpin(d,e)}return false}}).bind("keyup"+q,function(a){if(a.ctrl||a.alt)return true;if(N(f))K=false;switch(a.keyCode){case g:case i:case k:case h:case j:case l:E.removeClass(c);p._stopSpin();J=false;return false}}).bind("keypress"+q,function(a){if(O(a.keyCode,a.charCode))return false}).bind("change"+q,function(){p._change()}).bind("focus"+q,function(){function a(){p.element.select()}o?a():setTimeout(a,0);p.focused=true;s=p;if(!I&&(w=="focus"||w=="both"))p.showButtons()}).bind("blur"+q,function(){p.focused=false;if(!I&&(w=="focus"||w=="both"))p.hideButtons()})},_procOptions:function(a){var b=this,c=b.element,d=b.options,e=d.min,f=d.max,g=d.step,h=d.places,i=-1,j;if(d.increment=="slow")d.increment=[{count:1,mult:1,delay:250},{count:3,mult:1,delay:100},{count:0,mult:1,delay:50}];else if(d.increment=="fast")d.increment=[{count:1,mult:1,delay:250},{count:19,mult:1,delay:100},{count:80,mult:1,delay:20},{count:100,mult:10,delay:20},{count:0,mult:100,delay:20}];if(e==null&&(j=c.attr("min"))!=null)e=parseFloat(j);if(f==null&&(j=c.attr("max"))!=null)f=parseFloat(j);if(!g&&(j=c.attr("step"))!=null)if(j!="any"){g=parseFloat(j);d.largeStep*=g}d.step=g=g||d.defaultStep;if(h==null&&(j=g+"").indexOf(".")!=-1)h=j.length-j.indexOf(".")-1;b.places=h;if(f!=null&&e!=null){if(e>f)e=f;i=Math.max(Math.max(i,d.format(f,h,c).length),d.format(e,h,c).length)}if(a)b.inputMaxLength=c[0].maxLength;j=b.inputMaxLength;if(j>0){i=i>0?Math.min(j,i):j;j=Math.pow(10,i)-1;if(f==null||f>j)f=j;j=-(j+1)/10+1;if(e==null||e<j)e=j}if(i>0)c.attr("maxlength",i);d.min=e;d.max=f;b._change();c.unbind(p+q);if(d.mouseWheel)c.bind(p+q,b._mouseWheel)},_mouseWheel:function(b){var c=a.data(this,"spinner");if(!c.options.disabled&&c.focused&&s===c){c._change();c._doSpin(((b.wheelDelta||-b.detail)>0?1:-1)*c.options.step);return false}},_setTimer:function(a,b,c){function e(){d._spin(b,c)}var d=this;d._stopSpin();d.timer=setInterval(e,a)},_stopSpin:function(){if(this.timer){clearInterval(this.timer);this.timer=0}},_startSpin:function(a,b){var c=this,d=c.options,e=d.increment;c._change();c._doSpin(a*(b?c.options.largeStep:c.options.step));if(e&&e.length>0){c.counter=0;c.incCounter=0;c._setTimer(e[0].delay,a,b)}},_spin:function(a,b){var c=this,d=c.options.increment,e=d[c.incCounter];c._doSpin(a*e.mult*(b?c.options.largeStep:c.options.step));c.counter++;if(c.counter>e.count&&c.incCounter<d.length-1){c.counter=0;e=d[++c.incCounter];c._setTimer(e.delay,a,b)}},_doSpin:function(a){var b=this,c=b.curvalue;if(c==null)c=(a>0?b.options.min:b.options.max)||0;b._setValue(c+a)},_parseValue:function(){var a=this.element.val();return a?this.options.parse(a,this.element):null},_validate:function(a){var b=this.options,c=b.min,d=b.max;if(a==null&&!b.allowNull)a=this.curvalue!=null?this.curvalue:c||d||0;if(d!=null&&a>d)return d;else if(c!=null&&a<c)return c;else return a},_change:function(){var a=this,b=a._parseValue(),c=a.options.min,d=a.options.max;if(!a.selfChange){if(isNaN(b))b=a.curvalue;a._setValue(b,true)}},_setOption:function(b,c){a.Widget.prototype._setOption.call(this,b,c);this._procOptions()},increment:function(){this._doSpin(this.options.step)},decrement:function(){this._doSpin(-this.options.step)},showButtons:function(a){var b=this.btnContainer.stop();if(a)b.css("opacity",1);else b.fadeTo("fast",1)},hideButtons:function(a){var b=this.btnContainer.stop();if(a)b.css("opacity",0);else b.fadeTo("fast",0);this.buttons.removeClass(d)},_setValue:function(a,b){var c=this;c.curvalue=a=c._validate(a);c.element.val(a!=null?c.options.format(a,c.places,c.element):"");if(!b){c.selfChange=true;c.element.change();c.selfChange=false}},value:function(a){if(arguments.length){this._setValue(a);return this.element}return this.curvalue},enable:function(){this.buttons.removeClass(e);this.element[0].disabled=false;a.Widget.prototype.enable.call(this)},disable:function(){this.buttons.addClass(e).removeClass(d);this.element[0].disabled=true;a.Widget.prototype.disable.call(this)},destroy:function(b){this.wrapper.remove();this.element.unbind(q).css({width:this.oWidth,marginRight:this.oMargin});a.Widget.prototype.destroy.call(this)}})})(jQuery)
;/********************************************************************
 * Limit the characters that may be entered in a text field
 * Common options: alphanumeric, alphabetic or numeric
 * Kevin Sheedy, 2012
 * http://github.com/KevinSheedy/jquery.alphanum
 *********************************************************************/
(function( $ ){

	// API ///////////////////////////////////////////////////////////////////
	$.fn.alphanum = function(settings) {

		var combinedSettings = getCombinedSettingsAlphaNum(settings);

		var $collection = this;

		setupEventHandlers($collection, trimAlphaNum, combinedSettings);

		return this;
	};

	$.fn.alpha = function(settings) {

		var defaultAlphaSettings = getCombinedSettingsAlphaNum("alpha");
		var combinedSettings = getCombinedSettingsAlphaNum(settings, defaultAlphaSettings);

		var $collection = this;

		setupEventHandlers($collection, trimAlphaNum, combinedSettings);

		return this;
	};

	$.fn.numeric = function(settings) {

		var combinedSettings = getCombinedSettingsNum(settings);
		var $collection = this;

		setupEventHandlers($collection, trimNum, combinedSettings);

		$collection.blur(function(){
			numericField_Blur(this, settings);
		});

		return this;
	};

	// End of API /////////////////////////////////////////////////////////////


	// Start Settings ////////////////////////////////////////////////////////

	var DEFAULT_SETTINGS_ALPHANUM = {
		allow              : '',   // Allow extra characters
		disallow           : '',   // Disallow extra characters
		allowSpace         : true, // Allow the space character
		allowNumeric       : true, // Allow digits 0-9
		allowUpper         : true, // Allow upper case characters
		allowLower         : true, // Allow lower case characters
		allowCaseless      : true, // Allow characters that don't have both upper & lower variants - eg Arabic or Chinese
		allowLatin         : true, // a-z A-Z
		allowOtherCharSets : true, // eg �, �, Arabic, Chinese etc
		maxLength          : NaN   // eg Max Length
	}

	var DEFAULT_SETTINGS_NUM = {
		allowPlus           : false, // Allow the + sign
		allowMinus          : true,  // Allow the - sign
		allowThouSep        : true,  // Allow the thousands separator, default is the comma eg 12,000
		allowDecSep         : true,  // Allow the decimal separator, default is the fullstop eg 3.141
		allowLeadingSpaces  : false,
		maxDigits           : NaN,   // The max number of digits
		maxDecimalPlaces    : NaN,   // The max number of decimal places
		maxPreDecimalPlaces : NaN,   // The max number digits before the decimal point
		max                 : NaN,   // The max numeric value allowed
		min                 : NaN    // The min numeric value allowed
	}

	// Some pre-defined groups of settings for convenience
	var CONVENIENCE_SETTINGS_ALPHANUM = {
		"alpha" : {
			allowNumeric  : false
		},
		"upper" : {
			allowNumeric  : false,
			allowUpper    : true,
			allowLower    : false,
			allowCaseless : true
		},
		"lower" : {
			allowNumeric  : false,
			allowUpper    : false,
			allowLower    : true,
			allowCaseless : true
		}
	};

	// Some pre-defined groups of settings for convenience
	var CONVENIENCE_SETTINGS_NUMERIC = {
		"integer" : {
			allowPlus    : false,
			allowMinus   : true,
			allowThouSep : false,
			allowDecSep  : false
		},
		"positiveInteger" : {
			allowPlus    : false,
			allowMinus   : false,
			allowThouSep : false,
			allowDecSep  : false
		}
	};


	var BLACKLIST   = getBlacklistAscii() + getBlacklistNonAscii();
	var THOU_SEP    = ",";
	var DEC_SEP     = ".";
	var DIGITS      = getDigitsMap();
	var LATIN_CHARS = getLatinCharsSet();

	// Return the blacklisted special chars that are encodable using 7-bit ascii
	function getBlacklistAscii(){
		var blacklist = '!@#$%^&*()+=[]\\\';,/{}|":<>?~`.-_';
		blacklist += " "; // 'Space' is on the blacklist but can be enabled using the 'allowSpace' config entry
		return blacklist;
	}

	// Return the blacklisted special chars that are NOT encodable using 7-bit ascii
	// We want this .js file to be encoded using 7-bit ascii so it can reach the widest possible audience
	// Higher order chars must be escaped eg "\xAC"
	// Not too worried about comments containing higher order characters for now (let's wait and see if it becomes a problem)
	function getBlacklistNonAscii(){
		var blacklist =
				"\xAC"     // �
					+ "\u20AC"   // �
					+ "\xA3"     // �
					+ "\xA6"     // �
			;
		return blacklist;
	}

	// End Settings ////////////////////////////////////////////////////////


	// Implementation details go here ////////////////////////////////////////////////////////

	function setupEventHandlers($textboxes, trimFunction, settings) {

		$textboxes.each(function(){

			var $textbox = $(this);

			$textbox.bind("keyup change paste", function(e){

				var pastedText = "";

				if(e.originalEvent && e.originalEvent.clipboardData && e.originalEvent.clipboardData.getData)
					pastedText = e.originalEvent.clipboardData.getData("text/plain")

				// setTimeout is necessary for handling the 'paste' event
				setTimeout(function(){
					trimTextbox($textbox, trimFunction, settings, pastedText);
				}, 0);
			});

			$textbox.bind("keypress", function(e){

				// Determine which key is pressed.
				// If it's a control key, then allow the event's default action to occur eg backspace, tab
				var charCode = !e.charCode ? e.which : e.charCode;
				if(isControlKey(charCode)
					|| e.ctrlKey
					|| e.metaKey ) // cmd on MacOS
					return;

				var newChar         = String.fromCharCode(charCode);

				// Determine if some text was selected / highlighted when the key was pressed
				var selectionObject = $textbox.selection();
				var start = selectionObject.start;
				var end   = selectionObject.end;

				var textBeforeKeypress  = $textbox.val();

				// The new char may be inserted:
				//  1) At the start
				//  2) In the middle
				//  3) At the end
				//  4) User highlights some text and then presses a key which would replace the highlighted text
				//
				// Here we build the string that would result after the keypress.
				// If the resulting string is invalid, we cancel the event.
				// Unfortunately, it isn't enough to just check if the new char is valid because some chars
				// are position sensitive eg the decimal point '.'' or the minus sign '-'' are only valid in certain positions.
				var potentialTextAfterKeypress = textBeforeKeypress.substring(0, start) + newChar + textBeforeKeypress.substring(end);
				var validatedText              = trimFunction(potentialTextAfterKeypress, settings);

				// If the keypress would cause the textbox to contain invalid characters, then cancel the keypress event
				if(validatedText != potentialTextAfterKeypress)
					e.preventDefault();
			});
		});

	}

	// Ensure the text is a valid number when focus leaves the textbox
	// This catches the case where a user enters '-' or '.' without entering any digits
	function numericField_Blur(inputBox, settings) {
		var fieldValueNumeric = parseFloat($(inputBox).val());
		var $inputBox = $(inputBox);

		if(isNaN(fieldValueNumeric)) {
			$inputBox.val("");
			return;
		}

		if(isNumeric(settings.min) && fieldValueNumeric < settings.min)
			$inputBox.val("");

		if(isNumeric(settings.max) && fieldValueNumeric > settings.max)
			$inputBox.val("");
	}

	function isNumeric(value) {
		return !isNaN(value);
	}

	function isControlKey(charCode) {

		if(charCode >= 32)
			return false;
		if(charCode == 10)
			return false;
		if(charCode == 13)
			return false;

		return true;
	}

	// One way to prevent a character being entered is to cancel the keypress event.
	// However, this gets messy when you have to deal with things like copy paste which isn't a keypress.
	// Which event gets fired first, keypress or keyup? What about IE6 etc etc?
	// Instead, it's easier to allow the 'bad' character to be entered and then to delete it immediately after.

	function trimTextbox($textBox, trimFunction, settings, pastedText){

		var inputString = $textBox.val();

		if(inputString == "" && pastedText.length > 0)
			inputString = pastedText;

		var outputString = trimFunction(inputString, settings);

		if(inputString == outputString)
			return;

		var caretPos = $textBox.alphanum_caret();

		$textBox.val(outputString);

		//Reset the caret position
		if(inputString.length ==(outputString.length + 1))
			$textBox.alphanum_caret(caretPos - 1);
		else
			$textBox.alphanum_caret(caretPos);
	}

	function getCombinedSettingsAlphaNum(settings, defaultSettings){
		if(typeof defaultSettings == "undefined")
			defaultSettings = DEFAULT_SETTINGS_ALPHANUM;
		var userSettings, combinedSettings = {};
		if(typeof settings === "string")
			userSettings = CONVENIENCE_SETTINGS_ALPHANUM[settings];
		else if(typeof settings == "undefined")
			userSettings = {};
		else
			userSettings = settings;

		$.extend(combinedSettings, defaultSettings, userSettings);

		if(typeof combinedSettings.blacklist == 'undefined')
			combinedSettings.blacklistSet = getBlacklistSet(combinedSettings.allow, combinedSettings.disallow);

		return combinedSettings;
	}

	function getCombinedSettingsNum(settings){
		var userSettings, combinedSettings = {};
		if(typeof settings === "string")
			userSettings = CONVENIENCE_SETTINGS_NUMERIC[settings];
		else if(typeof settings == "undefined")
			userSettings = {};
		else
			userSettings = settings;

		$.extend(combinedSettings, DEFAULT_SETTINGS_NUM, userSettings);

		return combinedSettings;
	}


	// This is the heart of the algorithm
	function alphanum_allowChar(validatedStringFragment, Char, settings){

		if(settings.maxLength && validatedStringFragment.length >= settings.maxLength)
			return false;

		if(settings.allow.indexOf(Char) >=0 )
			return true;

		if(settings.allowSpace && (Char == " "))
			return true;

		if(settings.blacklistSet.contains(Char))
			return false;

		if(!settings.allowNumeric && DIGITS[Char])
			return false;

		if(!settings.allowUpper && isUpper(Char))
			return false;

		if(!settings.allowLower && isLower(Char))
			return false;

		if(!settings.allowCaseless && isCaseless(Char))
			return false;

		if(!settings.allowLatin && LATIN_CHARS.contains(Char))
			return false;

		if(!settings.allowOtherCharSets){
			if(DIGITS[Char] || LATIN_CHARS.contains(Char))
				return true;
			else
				return false;
		}

		return true;
	}

	function numeric_allowChar(validatedStringFragment, Char, settings){

		if(DIGITS[Char]) {

			if(isMaxDigitsReached(validatedStringFragment, settings))
				return false;

			if(isMaxPreDecimalsReached(validatedStringFragment, settings))
				return false;

			if(isMaxDecimalsReached(validatedStringFragment, settings))
				return false;

			if(isGreaterThanMax(validatedStringFragment + Char, settings))
				return false;

			if(isLessThanMin(validatedStringFragment + Char, settings))
				return false;

			return true;
		}

		if(settings.allowPlus && Char == '+' && validatedStringFragment == '')
			return true;

		if(settings.allowMinus && Char == '-' && validatedStringFragment == '')
			return true;

		if(Char == THOU_SEP && settings.allowThouSep && allowThouSep(validatedStringFragment, Char))
			return true;

		if(Char == DEC_SEP) {
			// Only one decimal separator allowed
			if(validatedStringFragment.indexOf(DEC_SEP) >= 0)
				return false;
			if(settings.allowDecSep)
				return true;
		}

		return false;
	}

	function countDigits(string) {

		// Error handling, nulls etc
		string = string + "";

		// Count the digits
		return string.replace(/[^0-9]/g,"").length;
	}

	function isMaxDigitsReached(string, settings) {

		var maxDigits = settings.maxDigits;

		if(maxDigits == "" || isNaN(maxDigits))
			return false; // In this case, there is no maximum

		var numDigits = countDigits(string);

		if(numDigits >= maxDigits)
			return true;

		return false;
	}

	function isMaxDecimalsReached(string, settings) {

		var maxDecimalPlaces = settings.maxDecimalPlaces;

		if(maxDecimalPlaces == "" || isNaN(maxDecimalPlaces))
			return false; // In this case, there is no maximum

		var indexOfDecimalPoint = string.indexOf(DEC_SEP);

		if(indexOfDecimalPoint == -1)
			return false;

		var decimalSubstring = string.substring(indexOfDecimalPoint);
		var numDecimals = countDigits(decimalSubstring);

		if(numDecimals >= maxDecimalPlaces)
			return true;

		return false;
	}

	function isMaxPreDecimalsReached(string, settings) {

		var maxPreDecimalPlaces = settings.maxPreDecimalPlaces;

		if(maxPreDecimalPlaces == "" || isNaN(maxPreDecimalPlaces))
			return false; // In this case, there is no maximum

		var indexOfDecimalPoint = string.indexOf(DEC_SEP);

		if(indexOfDecimalPoint >= 0)
			return false;

		var numPreDecimalDigits = countDigits(string);

		if(numPreDecimalDigits >= maxPreDecimalPlaces)
			return true;

		return false;
	}

	function isGreaterThanMax(numericString, settings) {

		if(!settings.max || settings.max < 0)
			return false;

		var outputNumber = parseFloat(numericString);
		if(outputNumber > settings.max)
			return true;

		return false;
	}

	function isLessThanMin(numericString, settings) {

		if(!settings.min || settings.min > 0)
			return false;

		var outputNumber = parseFloat(numericString);
		if(outputNumber < settings.min)
			return true;

		return false;
	}

	/********************************
	 * Trims a string according to the settings provided
	 ********************************/
	function trimAlphaNum(inputString, settings){

		if(typeof inputString != "string")
			return inputString;

		var inChars = inputString.split("");
		var outChars = [];
		var i = 0;
		var Char;

		for(i=0; i<inChars.length; i++){
			Char = inChars[i];
			var validatedStringFragment = outChars.join("");
			if(alphanum_allowChar(validatedStringFragment, Char, settings))
				outChars.push(Char);
		}

		return outChars.join("");
	}

	function trimNum(inputString, settings){
		if(typeof inputString != "string")
			return inputString;

		var inChars = inputString.split("");
		var outChars = [];
		var i = 0;
		var Char;

		for(i=0; i<inChars.length; i++){
			Char = inChars[i];
			var validatedStringFragment = outChars.join("");
			if(numeric_allowChar(validatedStringFragment, Char, settings))
				outChars.push(Char);
		}

		return outChars.join("");
	}

	function removeUpperCase(inputString){
		var charArray = inputString.split('');
		var i = 0;
		var outputArray = [];
		var Char;

		for(i=0; i<charArray.length; i++){
			Char = charArray[i];
		}
	}

	function removeLowerCase(inputString){

	}

	function isUpper(Char){
		var upper = Char.toUpperCase();
		var lower = Char.toLowerCase();

		if( (Char == upper) && (upper != lower))
			return true;
		else
			return false;
	}

	function isLower(Char){
		var upper = Char.toUpperCase();
		var lower = Char.toLowerCase();

		if( (Char == lower) && (upper != lower))
			return true;
		else
			return false;
	}

	function isCaseless(Char){
		if(Char.toUpperCase() == Char.toLowerCase())
			return true;
		else
			return false;
	}

	function getBlacklistSet(allow, disallow){

		var setOfBadChars  = new Set(BLACKLIST + disallow);
		var setOfGoodChars = new Set(allow);

		var blacklistSet   = setOfBadChars.subtract(setOfGoodChars);

		return blacklistSet;
	}

	function getDigitsMap(){
		var array = "0123456789".split("");
		var map = {};
		var i = 0;
		var digit;

		for(i=0; i<array.length; i++){
			digit = array[i];
			map[digit] = true;
		}

		return map;
	}

	function getLatinCharsSet(){
		var lower = "abcdefghijklmnopqrstuvwxyz";
		var upper = lower.toUpperCase();
		var azAZ = new Set(lower + upper);

		return azAZ;
	}

	function allowThouSep(currentString, Char) {

		// Can't start with a THOU_SEP
		if(currentString.length == 0)
			return false;

		// Can't have a THOU_SEP anywhere after a DEC_SEP
		var posOfDecSep = currentString.indexOf(DEC_SEP);
		if(posOfDecSep >= 0)
			return false;

		var posOfFirstThouSep       = currentString.indexOf(THOU_SEP);

		// Check if this is the first occurrence of a THOU_SEP
		if(posOfFirstThouSep < 0)
			return true;

		var posOfLastThouSep        = currentString.lastIndexOf(THOU_SEP);
		var charsSinceLastThouSep   = currentString.length - posOfLastThouSep - 1;

		// Check if there has been 3 digits since the last THOU_SEP
		if(charsSinceLastThouSep < 3)
			return false;

		var digitsSinceFirstThouSep = countDigits(currentString.substring(posOfFirstThouSep));

		// Check if there has been a multiple of 3 digits since the first THOU_SEP
		if((digitsSinceFirstThouSep % 3) > 0)
			return false;

		return true;
	}

	////////////////////////////////////////////////////////////////////////////////////
	// Implementation of a Set
	////////////////////////////////////////////////////////////////////////////////////
	function Set(elems){
		if(typeof elems == "string")
			this.map = stringToMap(elems);
		else
			this.map = {};
	}

	Set.prototype.add = function(set){

		var newSet = this.clone();

		for(var key in set.map)
			newSet.map[key] = true;

		return newSet;
	}

	Set.prototype.subtract = function(set){

		var newSet = this.clone();

		for(var key in set.map)
			delete newSet.map[key];

		return newSet;
	}

	Set.prototype.contains = function(key){
		if(this.map[key])
			return true;
		else
			return false;
	}

	Set.prototype.clone = function(){
		var newSet = new Set();

		for(var key in this.map)
			newSet.map[key] = true;

		return newSet;
	}
	////////////////////////////////////////////////////////////////////////////////////

	function stringToMap(string){
		var map = {};
		var array = string.split("");
		var i=0;
		var Char;

		for(i=0; i<array.length; i++){
			Char = array[i];
			map[Char] = true;
		}

		return map;
	}

	// Backdoor for testing
	$.fn.alphanum.backdoorAlphaNum = function(inputString, settings){
		var combinedSettings = getCombinedSettingsAlphaNum(settings);

		return trimAlphaNum(inputString, combinedSettings);
	};

	$.fn.alphanum.backdoorNumeric = function(inputString, settings){
		var combinedSettings = getCombinedSettingsNum(settings);

		return trimNum(inputString, combinedSettings);
	};

	$.fn.alphanum.setNumericSeparators = function(settings) {

		if(settings.thousandsSeparator.length != 1)
			return;

		if(settings.decimalSeparator.length != 1)
			return;

		THOU_SEP = settings.thousandsSeparator;
		DEC_SEP = settings.decimalSeparator;
	}

})( jQuery );


//Include the 3rd party lib: jquery.caret.js


// Set caret position easily in jQuery
// Written by and Copyright of Luke Morton, 2011
// Licensed under MIT
(function ($) {
	// Behind the scenes method deals with browser
	// idiosyncrasies and such
	function caretTo(el, index) {
		if (el.createTextRange) {
			var range = el.createTextRange();
			range.move("character", index);
			range.select();
		} else if (el.selectionStart != null) {
			el.focus();
			el.setSelectionRange(index, index);
		}
	};

	// Another behind the scenes that collects the
	// current caret position for an element

	// TODO: Get working with Opera
	function caretPos(el) {
		if ("selection" in document) {
			var range = el.createTextRange();
			try {
				range.setEndPoint("EndToStart", document.selection.createRange());
			} catch (e) {
				// Catch IE failure here, return 0 like
				// other browsers
				return 0;
			}
			return range.text.length;
		} else if (el.selectionStart != null) {
			return el.selectionStart;
		}
	};

	// The following methods are queued under fx for more
	// flexibility when combining with $.fn.delay() and
	// jQuery effects.

	// Set caret to a particular index
	$.fn.alphanum_caret = function (index, offset) {
		if (typeof(index) === "undefined") {
			return caretPos(this.get(0));
		}

		return this.queue(function (next) {
			if (isNaN(index)) {
				var i = $(this).val().indexOf(index);

				if (offset === true) {
					i += index.length;
				} else if (typeof(offset) !== "undefined") {
					i += offset;
				}

				caretTo(this, i);
			} else {
				caretTo(this, index);
			}

			next();
		});
	};
}(jQuery));

/**********************************************************
 * Selection Library
 * Used to determine what text is highlighted in the textbox before a key is pressed.
 * http://donejs.com/docs.html#!jQuery.fn.selection
 * https://github.com/jupiterjs/jquerymx/blob/master/dom/selection/selection.js
 ***********************************************************/
(function(e){var t=function(e){return e.replace(/([a-z])([a-z]+)/gi,function(e,t,n){return t+n.toLowerCase()}).replace(/_/g,"")},n=function(e){return e.replace(/^([a-z]+)_TO_([a-z]+)/i,function(e,t,n){return n+"_TO_"+t})},r=function(e){return e?e.ownerDocument.defaultView||e.ownerDocument.parentWindow:window},i=function(t,n){var r=e.Range.current(t).clone(),i=e.Range(t).select(t);if(!r.overlaps(i)){return null}if(r.compare("START_TO_START",i)<1){startPos=0;r.move("START_TO_START",i)}else{fromElementToCurrent=i.clone();fromElementToCurrent.move("END_TO_START",r);startPos=fromElementToCurrent.toString().length}if(r.compare("END_TO_END",i)>=0){endPos=i.toString().length}else{endPos=startPos+r.toString().length}return{start:startPos,end:endPos}},s=function(t){var n=r(t);if(t.selectionStart!==undefined){if(document.activeElement&&document.activeElement!=t&&t.selectionStart==t.selectionEnd&&t.selectionStart==0){return{start:t.value.length,end:t.value.length}}return{start:t.selectionStart,end:t.selectionEnd}}else if(n.getSelection){return i(t,n)}else{try{if(t.nodeName.toLowerCase()=="input"){var s=r(t).document.selection.createRange(),o=t.createTextRange();o.setEndPoint("EndToStart",s);var u=o.text.length;return{start:u,end:u+s.text.length}}else{var a=i(t,n);if(!a){return a}var f=e.Range.current().clone(),l=f.clone().collapse().range,c=f.clone().collapse(false).range;l.moveStart("character",-1);c.moveStart("character",-1);if(a.startPos!=0&&l.text==""){a.startPos+=2}if(a.endPos!=0&&c.text==""){a.endPos+=2}return a}}catch(h){return{start:t.value.length,end:t.value.length}}}},o=function(e,t,n){var i=r(e);if(e.setSelectionRange){if(n===undefined){e.focus();e.setSelectionRange(t,t)}else{e.select();e.selectionStart=t;e.selectionEnd=n}}else if(e.createTextRange){var s=e.createTextRange();s.moveStart("character",t);n=n||t;s.moveEnd("character",n-e.value.length);s.select()}else if(i.getSelection){var o=i.document,u=i.getSelection(),f=o.createRange(),l=[t,n!==undefined?n:t];a([e],l);f.setStart(l[0].el,l[0].count);f.setEnd(l[1].el,l[1].count);u.removeAllRanges();u.addRange(f)}else if(i.document.body.createTextRange){var f=document.body.createTextRange();f.moveToElementText(e);f.collapse();f.moveStart("character",t);f.moveEnd("character",n!==undefined?n:t);f.select()}},u=function(e,t,n,r){if(typeof n[0]==="number"&&n[0]<t){n[0]={el:r,count:n[0]-e}}if(typeof n[1]==="number"&&n[1]<=t){n[1]={el:r,count:n[1]-e};}},a=function(e,t,n){var r,i;n=n||0;for(var s=0;e[s];s++){r=e[s];if(r.nodeType===3||r.nodeType===4){i=n;n+=r.nodeValue.length;u(i,n,t,r)}else if(r.nodeType!==8){n=a(r.childNodes,t,n)}}return n};jQuery.fn.selection=function(e,t){if(e!==undefined){return this.each(function(){o(this,e,t)})}else{return s(this[0])}};e.fn.selection.getCharElement=a})(jQuery);/**
 * jQuery Select2 Sortable
 * - enable select2 to be sortable via normal select element
 *
 * author      : Vafour
 * inspired by : jQuery Chosen Sortable (https://github.com/mrhenry/jquery-chosen-sortable)
 * License     : GPL
 */

(function($){
	$.fn.extend({
		select2SortableOrder: function(){
			var $this = this.filter('[multiple]');

			$this.each(function(){
				var $select  = $(this);

				// skip elements not select2-ed
				if(typeof($select.data('select2')) !== 'object'){
					return false;
				}

				var $select2 = $select.siblings('.select2-container'),
					unselected = [],
					sorted;

				$select.find('option').each(function(){
					!this.selected && unselected.push(this);
				});

				sorted = $($select2.find('.select2-choices li[class!="select2-search-field"]').map( function() {
					if (!this) {
						return undefined;
					}
					var id = $(this).data('select2Data').id;
					return $select.find('option[value="' + id + '"]')[0];
				}));

				sorted.push.apply(sorted, unselected);
				$select.children().remove();
				$select.append(sorted);
			});

			return $this;
		},
		select2Sortable: function(){
			var args         = Array.prototype.slice.call(arguments, 0);
			$this        = this.filter('[multiple]'),
				validMethods = ['destroy'];

			if(args.length === 0 || typeof(args[0]) === 'object')
			{
				var defaultOptions = {
					bindOrder       : 'formSubmit', // or sortableStop
					sortableOptions : {
						placeholder : 'ui-state-highlight',
						items       : 'li:not(.select2-search-field)',
						tolerance   : 'pointer'
					}
				};
				var options = $.extend(defaultOptions, args[0]);

				// Init select2 only if not already initialized to prevent select2 configuration loss
				if(typeof($this.data('select2')) !== 'object'){
					$this.select2();
				}

				$this.each(function(){
					var $select  = $(this),
						$select2choices = $select.siblings('.select2-container').find('.select2-choices');

					// Init jQuery UI Sortable
					$select2choices.sortable(options.sortableOptions);

					switch(options.bindOrder){
						case 'sortableStop':
							// apply options ordering in sortstop event
							$select2choices.on("sortstop.select2sortable", function( event, ui ) {
								$select.select2SortableOrder();
							});
							$select.on('change', function(e){
								$(this).select2SortableOrder();
							});
							break;
						default:
							// apply options ordering in form submit
							$select.closest('form').unbind('submit.select2sortable').on('submit.select2sortable', function(){
								$select.select2SortableOrder();
							});
					}

				});
			}
			else if(typeof(args[0] === 'string'))
			{
				if($.inArray(args[0], validMethods) == -1)
				{
					throw "Unknown method: " + args[0];
				}
				if(args[0] === 'destroy')
				{
					$this.select2SortableDestroy();
				}
			}
			return $this;
		},
		select2SortableDestroy: function(){
			var $this = this.filter('[multiple]');
			$this.each(function(){
				var $select         = $(this),
					$select2choices = $select.parent().find('.select2-choices');

				// unbind form submit event
				$select.closest('form').unbind('submit.select2sortable');

				// unbind sortstop event
				$select2choices.unbind("sortstop.select2sortable");

				// destroy select2Sortable
				$select2choices.sortable('destroy');
			});
			return $this;
		}
	});
}(jQuery));;/*
 * jQuery MiniColors: A tiny color picker built on jQuery
 *
 * Copyright Cory LaViska for A Beautiful Site, LLC. (http://www.abeautifulsite.net/)
 *
 * Licensed under the MIT license: http://opensource.org/licenses/MIT
 *
 */
if(jQuery) (function($) {

	// Defaults
	$.minicolors = {
		defaults: {
			animationSpeed: 50,
			animationEasing: 'swing',
			change: null,
			changeDelay: 0,
			control: 'hue',
			defaultValue: '',
			hide: null,
			hideSpeed: 100,
			inline: false,
			letterCase: 'lowercase',
			opacity: false,
			position: 'bottom left',
			show: null,
			showSpeed: 100,
			theme: 'default'
		}
	};

	// Public methods
	$.extend($.fn, {
		minicolors: function(method, data) {

			switch(method) {

				// Destroy the control
				case 'destroy':
					$(this).each( function() {
						destroy($(this));
					});
					return $(this);

				// Hide the color picker
				case 'hide':
					hide();
					return $(this);

				// Get/set opacity
				case 'opacity':
					// Getter
					if( data === undefined ) {
						// Getter
						return $(this).attr('data-opacity');
					} else {
						// Setter
						$(this).each( function() {
							updateFromInput($(this).attr('data-opacity', data));
						});
					}
					return $(this);

				// Get an RGB(A) object based on the current color/opacity
				case 'rgbObject':
					return rgbObject($(this), method === 'rgbaObject');

				// Get an RGB(A) string based on the current color/opacity
				case 'rgbString':
				case 'rgbaString':
					return rgbString($(this), method === 'rgbaString');

				// Get/set settings on the fly
				case 'settings':
					if( data === undefined ) {
						return $(this).data('minicolors-settings');
					} else {
						// Setter
						$(this).each( function() {
							var settings = $(this).data('minicolors-settings') || {};
							destroy($(this));
							$(this).minicolors($.extend(true, settings, data));
						});
					}
					return $(this);

				// Show the color picker
				case 'show':
					show( $(this).eq(0) );
					return $(this);

				// Get/set the hex color value
				case 'value':
					if( data === undefined ) {
						// Getter
						return $(this).val();
					} else {
						// Setter
						$(this).each( function() {
							updateFromInput($(this).val(data));
						});
					}
					return $(this);

				// Initializes the control
				default:
					if( method !== 'create' ) data = method;
					$(this).each( function() {
						init($(this), data);
					});
					return $(this);

			}

		}
	});

	// Initialize input elements
	function init(input, settings) {

		var minicolors = $('<div class="minicolors" />'),
			defaults = $.minicolors.defaults;

		// Do nothing if already initialized
		if( input.data('minicolors-initialized') ) return;

		// Handle settings
		settings = $.extend(true, {}, defaults, settings);

		// The wrapper
		minicolors
			.addClass('minicolors-theme-' + settings.theme)
			.toggleClass('minicolors-with-opacity', settings.opacity);

		// Custom positioning
		if( settings.position !== undefined ) {
			$.each(settings.position.split(' '), function() {
				minicolors.addClass('minicolors-position-' + this);
			});
		}

		// The input
		input
			.addClass('minicolors-input')
			.data('minicolors-initialized', false)
			.data('minicolors-settings', settings)
			.prop('size', 7)
			.wrap(minicolors)
			.after(
				'<div class="minicolors-panel minicolors-slider-' + settings.control + '">' +
					'<div class="minicolors-slider">' +
					'<div class="minicolors-picker"></div>' +
					'</div>' +
					'<div class="minicolors-opacity-slider">' +
					'<div class="minicolors-picker"></div>' +
					'</div>' +
					'<div class="minicolors-grid">' +
					'<div class="minicolors-grid-inner"></div>' +
					'<div class="minicolors-picker"><div></div></div>' +
					'</div>' +
					'</div>'
			);

		// The swatch
		if( !settings.inline ) {
			input.after('<span class="minicolors-swatch"><span class="minicolors-swatch-color"></span></span>');
			input.next('.minicolors-swatch').on('click', function(event) {
				event.preventDefault();
				input.focus();
			});
		}

		// Prevent text selection in IE
		input.parent().find('.minicolors-panel').on('selectstart', function() { return false; }).end();

		// Inline controls
		if( settings.inline ) input.parent().addClass('minicolors-inline');

		updateFromInput(input, false);

		input.data('minicolors-initialized', true);

	}

	// Returns the input back to its original state
	function destroy(input) {

		var minicolors = input.parent();

		// Revert the input element
		input
			.removeData('minicolors-initialized')
			.removeData('minicolors-settings')
			.removeProp('size')
			.removeClass('minicolors-input');

		// Remove the wrap and destroy whatever remains
		minicolors.before(input).remove();

	}

	// Shows the specified dropdown panel
	function show(input) {

		var minicolors = input.parent(),
			panel = minicolors.find('.minicolors-panel'),
			settings = input.data('minicolors-settings');

		// Do nothing if uninitialized, disabled, inline, or already open
		if( !input.data('minicolors-initialized') ||
			input.prop('disabled') ||
			minicolors.hasClass('minicolors-inline') ||
			minicolors.hasClass('minicolors-focus')
			) return;

		hide();

		minicolors.addClass('minicolors-focus');
		panel
			.stop(true, true)
			.fadeIn(settings.showSpeed, function() {
				if( settings.show ) settings.show.call(input.get(0));
			});

	}

	// Hides all dropdown panels
	function hide() {

		$('.minicolors-input').each( function() {

			var input = $(this),
				settings = input.data('minicolors-settings'),
				minicolors = input.parent();

			// Don't hide inline controls
			if( settings.inline ) return;

			minicolors.find('.minicolors-panel').fadeOut(settings.hideSpeed, function() {
				if(minicolors.hasClass('minicolors-focus')) {
					if( settings.hide ) settings.hide.call(input.get(0));
				}
				minicolors.removeClass('minicolors-focus');
			});

		});
	}

	// Moves the selected picker
	function move(target, event, animate) {

		var input = target.parents('.minicolors').find('.minicolors-input'),
			settings = input.data('minicolors-settings'),
			picker = target.find('[class$=-picker]'),
			offsetX = target.offset().left,
			offsetY = target.offset().top,
			x = Math.round(event.pageX - offsetX),
			y = Math.round(event.pageY - offsetY),
			duration = animate ? settings.animationSpeed : 0,
			wx, wy, r, phi;


		// Touch support
		if( event.originalEvent.changedTouches ) {
			x = event.originalEvent.changedTouches[0].pageX - offsetX;
			y = event.originalEvent.changedTouches[0].pageY - offsetY;
		}

		// Constrain picker to its container
		if( x < 0 ) x = 0;
		if( y < 0 ) y = 0;
		if( x > target.width() ) x = target.width();
		if( y > target.height() ) y = target.height();

		// Constrain color wheel values to the wheel
		if( target.parent().is('.minicolors-slider-wheel') && picker.parent().is('.minicolors-grid') ) {
			wx = 75 - x;
			wy = 75 - y;
			r = Math.sqrt(wx * wx + wy * wy);
			phi = Math.atan2(wy, wx);
			if( phi < 0 ) phi += Math.PI * 2;
			if( r > 75 ) {
				r = 75;
				x = 75 - (75 * Math.cos(phi));
				y = 75 - (75 * Math.sin(phi));
			}
			x = Math.round(x);
			y = Math.round(y);
		}

		// Move the picker
		if( target.is('.minicolors-grid') ) {
			picker
				.stop(true)
				.animate({
					top: y + 'px',
					left: x + 'px'
				}, duration, settings.animationEasing, function() {
					updateFromControl(input, target);
				});
		} else {
			picker
				.stop(true)
				.animate({
					top: y + 'px'
				}, duration, settings.animationEasing, function() {
					updateFromControl(input, target);
				});
		}

	}

	// Sets the input based on the color picker values
	function updateFromControl(input, target) {

		function getCoords(picker, container) {

			var left, top;
			if( !picker.length || !container ) return null;
			left = picker.offset().left;
			top = picker.offset().top;

			return {
				x: left - container.offset().left + (picker.outerWidth() / 2),
				y: top - container.offset().top + (picker.outerHeight() / 2)
			};

		}

		var hue, saturation, brightness, x, y, r, phi,

			hex = input.val(),
			opacity = input.attr('data-opacity'),

		// Helpful references
			minicolors = input.parent(),
			settings = input.data('minicolors-settings'),
			swatch = minicolors.find('.minicolors-swatch'),

		// Panel objects
			grid = minicolors.find('.minicolors-grid'),
			slider = minicolors.find('.minicolors-slider'),
			opacitySlider = minicolors.find('.minicolors-opacity-slider'),

		// Picker objects
			gridPicker = grid.find('[class$=-picker]'),
			sliderPicker = slider.find('[class$=-picker]'),
			opacityPicker = opacitySlider.find('[class$=-picker]'),

		// Picker positions
			gridPos = getCoords(gridPicker, grid),
			sliderPos = getCoords(sliderPicker, slider),
			opacityPos = getCoords(opacityPicker, opacitySlider);

		// Handle colors
		if( target.is('.minicolors-grid, .minicolors-slider') ) {

			// Determine HSB values
			switch(settings.control) {

				case 'wheel':
					// Calculate hue, saturation, and brightness
					x = (grid.width() / 2) - gridPos.x;
					y = (grid.height() / 2) - gridPos.y;
					r = Math.sqrt(x * x + y * y);
					phi = Math.atan2(y, x);
					if( phi < 0 ) phi += Math.PI * 2;
					if( r > 75 ) {
						r = 75;
						gridPos.x = 69 - (75 * Math.cos(phi));
						gridPos.y = 69 - (75 * Math.sin(phi));
					}
					saturation = keepWithin(r / 0.75, 0, 100);
					hue = keepWithin(phi * 180 / Math.PI, 0, 360);
					brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
					hex = hsb2hex({
						h: hue,
						s: saturation,
						b: brightness
					});

					// Update UI
					slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));
					break;

				case 'saturation':
					// Calculate hue, saturation, and brightness
					hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);
					saturation = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
					brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
					hex = hsb2hex({
						h: hue,
						s: saturation,
						b: brightness
					});

					// Update UI
					slider.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: brightness }));
					minicolors.find('.minicolors-grid-inner').css('opacity', saturation / 100);
					break;

				case 'brightness':
					// Calculate hue, saturation, and brightness
					hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);
					saturation = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
					brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);
					hex = hsb2hex({
						h: hue,
						s: saturation,
						b: brightness
					});

					// Update UI
					slider.css('backgroundColor', hsb2hex({ h: hue, s: saturation, b: 100 }));
					minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (brightness / 100));
					break;

				default:
					// Calculate hue, saturation, and brightness
					hue = keepWithin(360 - parseInt(sliderPos.y * (360 / slider.height()), 10), 0, 360);
					saturation = keepWithin(Math.floor(gridPos.x * (100 / grid.width())), 0, 100);
					brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);
					hex = hsb2hex({
						h: hue,
						s: saturation,
						b: brightness
					});

					// Update UI
					grid.css('backgroundColor', hsb2hex({ h: hue, s: 100, b: 100 }));
					break;

			}

			// Adjust case
			input.val( convertCase(hex, settings.letterCase) );

		}

		// Handle opacity
		if( target.is('.minicolors-opacity-slider') ) {
			if( settings.opacity ) {
				opacity = parseFloat(1 - (opacityPos.y / opacitySlider.height())).toFixed(2);
			} else {
				opacity = 1;
			}
			if( settings.opacity ) input.attr('data-opacity', opacity);
		}

		// Set swatch color
		swatch.find('SPAN').css({
			backgroundColor: hex,
			opacity: opacity
		});

		// Handle change event
		doChange(input, hex, opacity);

	}

	// Sets the color picker values from the input
	function updateFromInput(input, preserveInputValue) {

		var hex,
			hsb,
			opacity,
			x, y, r, phi,

		// Helpful references
			minicolors = input.parent(),
			settings = input.data('minicolors-settings'),
			swatch = minicolors.find('.minicolors-swatch'),

		// Panel objects
			grid = minicolors.find('.minicolors-grid'),
			slider = minicolors.find('.minicolors-slider'),
			opacitySlider = minicolors.find('.minicolors-opacity-slider'),

		// Picker objects
			gridPicker = grid.find('[class$=-picker]'),
			sliderPicker = slider.find('[class$=-picker]'),
			opacityPicker = opacitySlider.find('[class$=-picker]');

		// Determine hex/HSB values
		hex = convertCase(parseHex(input.val(), true), settings.letterCase);
		if( !hex ){
			hex = convertCase(parseHex(settings.defaultValue, true), settings.letterCase);
		}
		hsb = hex2hsb(hex);

		// Update input value
		if( !preserveInputValue ) input.val(hex);

		// Determine opacity value
		if( settings.opacity ) {
			// Get from data-opacity attribute and keep within 0-1 range
			opacity = input.attr('data-opacity') === '' ? 1 : keepWithin(parseFloat(input.attr('data-opacity')).toFixed(2), 0, 1);
			if( isNaN(opacity) ) opacity = 1;
			input.attr('data-opacity', opacity);
			swatch.find('SPAN').css('opacity', opacity);

			// Set opacity picker position
			y = keepWithin(opacitySlider.height() - (opacitySlider.height() * opacity), 0, opacitySlider.height());
			opacityPicker.css('top', y + 'px');
		}

		// Update swatch
		swatch.find('SPAN').css('backgroundColor', hex);

		// Determine picker locations
		switch(settings.control) {

			case 'wheel':
				// Set grid position
				r = keepWithin(Math.ceil(hsb.s * 0.75), 0, grid.height() / 2);
				phi = hsb.h * Math.PI / 180;
				x = keepWithin(75 - Math.cos(phi) * r, 0, grid.width());
				y = keepWithin(75 - Math.sin(phi) * r, 0, grid.height());
				gridPicker.css({
					top: y + 'px',
					left: x + 'px'
				});

				// Set slider position
				y = 150 - (hsb.b / (100 / grid.height()));
				if( hex === '' ) y = 0;
				sliderPicker.css('top', y + 'px');

				// Update panel color
				slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));
				break;

			case 'saturation':
				// Set grid position
				x = keepWithin((5 * hsb.h) / 12, 0, 150);
				y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());
				gridPicker.css({
					top: y + 'px',
					left: x + 'px'
				});

				// Set slider position
				y = keepWithin(slider.height() - (hsb.s * (slider.height() / 100)), 0, slider.height());
				sliderPicker.css('top', y + 'px');

				// Update UI
				slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: hsb.b }));
				minicolors.find('.minicolors-grid-inner').css('opacity', hsb.s / 100);
				break;

			case 'brightness':
				// Set grid position
				x = keepWithin((5 * hsb.h) / 12, 0, 150);
				y = keepWithin(grid.height() - Math.ceil(hsb.s / (100 / grid.height())), 0, grid.height());
				gridPicker.css({
					top: y + 'px',
					left: x + 'px'
				});

				// Set slider position
				y = keepWithin(slider.height() - (hsb.b * (slider.height() / 100)), 0, slider.height());
				sliderPicker.css('top', y + 'px');

				// Update UI
				slider.css('backgroundColor', hsb2hex({ h: hsb.h, s: hsb.s, b: 100 }));
				minicolors.find('.minicolors-grid-inner').css('opacity', 1 - (hsb.b / 100));
				break;

			default:
				// Set grid position
				x = keepWithin(Math.ceil(hsb.s / (100 / grid.width())), 0, grid.width());
				y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());
				gridPicker.css({
					top: y + 'px',
					left: x + 'px'
				});

				// Set slider position
				y = keepWithin(slider.height() - (hsb.h / (360 / slider.height())), 0, slider.height());
				sliderPicker.css('top', y + 'px');

				// Update panel color
				grid.css('backgroundColor', hsb2hex({ h: hsb.h, s: 100, b: 100 }));
				break;

		}

		// Fire change event, but only if minicolors is fully initialized
		if( input.data('minicolors-initialized') ) {
			doChange(input, hex, opacity);
		}

	}

	// Runs the change and changeDelay callbacks
	function doChange(input, hex, opacity) {

		var settings = input.data('minicolors-settings'),
			lastChange = input.data('minicolors-lastChange');

		// Only run if it actually changed
		if( !lastChange || lastChange.hex !== hex || lastChange.opacity !== opacity ) {

			// Remember last-changed value
			input.data('minicolors-lastChange', {
				hex: hex,
				opacity: opacity
			});

			// Fire change event
			if( settings.change ) {
				if( settings.changeDelay ) {
					// Call after a delay
					clearTimeout(input.data('minicolors-changeTimeout'));
					input.data('minicolors-changeTimeout', setTimeout( function() {
						settings.change.call(input.get(0), hex, opacity);
					}, settings.changeDelay));
				} else {
					// Call immediately
					settings.change.call(input.get(0), hex, opacity);
				}
			}
			input.trigger('change').trigger('input');
		}

	}

	// Generates an RGB(A) object based on the input's value
	function rgbObject(input) {
		var hex = parseHex($(input).val(), true),
			rgb = hex2rgb(hex),
			opacity = $(input).attr('data-opacity');
		if( !rgb ) return null;
		if( opacity !== undefined ) $.extend(rgb, { a: parseFloat(opacity) });
		return rgb;
	}

	// Genearates an RGB(A) string based on the input's value
	function rgbString(input, alpha) {
		var hex = parseHex($(input).val(), true),
			rgb = hex2rgb(hex),
			opacity = $(input).attr('data-opacity');
		if( !rgb ) return null;
		if( opacity === undefined ) opacity = 1;
		if( alpha ) {
			return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat(opacity) + ')';
		} else {
			return 'rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')';
		}
	}

	// Converts to the letter case specified in settings
	function convertCase(string, letterCase) {
		return letterCase === 'uppercase' ? string.toUpperCase() : string.toLowerCase();
	}

	// Parses a string and returns a valid hex string when possible
	function parseHex(string, expand) {
		string = string.replace(/[^A-F0-9]/ig, '');
		if( string.length !== 3 && string.length !== 6 ) return '';
		if( string.length === 3 && expand ) {
			string = string[0] + string[0] + string[1] + string[1] + string[2] + string[2];
		}
		return '#' + string;
	}

	// Keeps value within min and max
	function keepWithin(value, min, max) {
		if( value < min ) value = min;
		if( value > max ) value = max;
		return value;
	}

	// Converts an HSB object to an RGB object
	function hsb2rgb(hsb) {
		var rgb = {};
		var h = Math.round(hsb.h);
		var s = Math.round(hsb.s * 255 / 100);
		var v = Math.round(hsb.b * 255 / 100);
		if(s === 0) {
			rgb.r = rgb.g = rgb.b = v;
		} else {
			var t1 = v;
			var t2 = (255 - s) * v / 255;
			var t3 = (t1 - t2) * (h % 60) / 60;
			if( h === 360 ) h = 0;
			if( h < 60 ) { rgb.r = t1; rgb.b = t2; rgb.g = t2 + t3; }
			else if( h < 120 ) {rgb.g = t1; rgb.b = t2; rgb.r = t1 - t3; }
			else if( h < 180 ) {rgb.g = t1; rgb.r = t2; rgb.b = t2 + t3; }
			else if( h < 240 ) {rgb.b = t1; rgb.r = t2; rgb.g = t1 - t3; }
			else if( h < 300 ) {rgb.b = t1; rgb.g = t2; rgb.r = t2 + t3; }
			else if( h < 360 ) {rgb.r = t1; rgb.g = t2; rgb.b = t1 - t3; }
			else { rgb.r = 0; rgb.g = 0; rgb.b = 0; }
		}
		return {
			r: Math.round(rgb.r),
			g: Math.round(rgb.g),
			b: Math.round(rgb.b)
		};
	}

	// Converts an RGB object to a hex string
	function rgb2hex(rgb) {
		var hex = [
			rgb.r.toString(16),
			rgb.g.toString(16),
			rgb.b.toString(16)
		];
		$.each(hex, function(nr, val) {
			if (val.length === 1) hex[nr] = '0' + val;
		});
		return '#' + hex.join('');
	}

	// Converts an HSB object to a hex string
	function hsb2hex(hsb) {
		return rgb2hex(hsb2rgb(hsb));
	}

	// Converts a hex string to an HSB object
	function hex2hsb(hex) {
		var hsb = rgb2hsb(hex2rgb(hex));
		if( hsb.s === 0 ) hsb.h = 360;
		return hsb;
	}

	// Converts an RGB object to an HSB object
	function rgb2hsb(rgb) {
		var hsb = { h: 0, s: 0, b: 0 };
		var min = Math.min(rgb.r, rgb.g, rgb.b);
		var max = Math.max(rgb.r, rgb.g, rgb.b);
		var delta = max - min;
		hsb.b = max;
		hsb.s = max !== 0 ? 255 * delta / max : 0;
		if( hsb.s !== 0 ) {
			if( rgb.r === max ) {
				hsb.h = (rgb.g - rgb.b) / delta;
			} else if( rgb.g === max ) {
				hsb.h = 2 + (rgb.b - rgb.r) / delta;
			} else {
				hsb.h = 4 + (rgb.r - rgb.g) / delta;
			}
		} else {
			hsb.h = -1;
		}
		hsb.h *= 60;
		if( hsb.h < 0 ) {
			hsb.h += 360;
		}
		hsb.s *= 100/255;
		hsb.b *= 100/255;
		return hsb;
	}

	// Converts a hex string to an RGB object
	function hex2rgb(hex) {
		hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
		return {
			r: hex >> 16,
			g: (hex & 0x00FF00) >> 8,
			b: (hex & 0x0000FF)
		};
	}

	// Handle events
	$(document)
		// Hide on clicks outside of the control
		.on('mousedown.minicolors touchstart.minicolors', function(event) {
			if( !$(event.target).parents().add(event.target).hasClass('minicolors') ) {
				hide();
			}
		})
		// Start moving
		.on('mousedown.minicolors touchstart.minicolors', '.minicolors-grid, .minicolors-slider, .minicolors-opacity-slider', function(event) {
			var target = $(this);
			event.preventDefault();
			$(document).data('minicolors-target', target);
			move(target, event, true);
		})
		// Move pickers
		.on('mousemove.minicolors touchmove.minicolors', function(event) {
			var target = $(document).data('minicolors-target');
			if( target ) move(target, event);
		})
		// Stop moving
		.on('mouseup.minicolors touchend.minicolors', function() {
			$(this).removeData('minicolors-target');
		})
		// Show panel when swatch is clicked
		.on('mousedown.minicolors touchstart.minicolors', '.minicolors-swatch', function(event) {
			var input = $(this).parent().find('.minicolors-input');
			event.preventDefault();
			show(input);
		})
		// Show on focus
		.on('focus.minicolors', '.minicolors-input', function() {
			var input = $(this);
			if( !input.data('minicolors-initialized') ) return;
			show(input);
		})
		// Fix hex on blur
		.on('blur.minicolors', '.minicolors-input', function() {
			var input = $(this),
				settings = input.data('minicolors-settings');
			if( !input.data('minicolors-initialized') ) return;

			// Parse Hex
			input.val(parseHex(input.val(), true));

			// Is it blank?
			if( input.val() === '' ) input.val(parseHex(settings.defaultValue, true));

			// Adjust case
			input.val( convertCase(input.val(), settings.letterCase) );

		})
		// Handle keypresses
		.on('keydown.minicolors', '.minicolors-input', function(event) {
			var input = $(this);
			if( !input.data('minicolors-initialized') ) return;
			switch(event.keyCode) {
				case 9: // tab
					hide();
					break;
				case 13: // enter
				case 27: // esc
					hide();
					input.blur();
					break;
			}
		})
		// Update on keyup
		.on('keyup.minicolors', '.minicolors-input', function() {
			var input = $(this);
			if( !input.data('minicolors-initialized') ) return;
			updateFromInput(input, true);
		})
		// Update on paste
		.on('paste.minicolors', '.minicolors-input', function() {
			var input = $(this);
			if( !input.data('minicolors-initialized') ) return;
			setTimeout( function() {
				updateFromInput(input, true);
			}, 1);
		});

})(jQuery);;/*global jQuery, document*/

jQuery(document).ready(function () {

	jQuery('.ace-editor').each(function(index, element){


		var area = element;
		var editor = jQuery(element).attr('data-editor');

		var aceeditor = ace.edit(editor);
		aceeditor.setTheme("ace/theme/"  + jQuery(element).attr('data-theme'));
		aceeditor.getSession().setMode("ace/mode/" + jQuery(element).attr('data-mode'));

		aceeditor.on('change', function(e){
			jQuery('#'+area.id).val(aceeditor.getSession().getValue());
			redux_change(jQuery(element));
		});

	});

});;/* global redux_change, wp */

(function($){
	"use strict";

	var api = wp.customize;

	$.reduxBackground = $.reduxBackground || {};

	$(document).ready(function () {
		$.reduxBackground.init();
	});

	/**
	 * Redux Background
	 * Dependencies		: jquery, wp media uploader
	 * Feature added by	: Dovy Paukstys
	 * Date				: 07 Jan 2014
	 */
	$.reduxBackground.init = function(){

		// Remove the image button
		$(document).unbind('click').on('click', '.redux-container-background .remove-image, .redux-container-background .remove-file', function(e) {
			$.reduxBackground.removeImage( $(this).parents('fieldset.redux-field:first') );
			$.reduxBackground.preview($(this));
			return false;
		});

		// Upload media button
		$('.redux-container-background .background_upload_button').unbind().on('click', function( event ) {
			$.reduxBackground.addImage( event, $(this).parents('fieldset.redux-field:first') );
		});

		$('.redux-background-input').on('change', function() {
			$.reduxBackground.preview($(this));
		});

		$('.redux-container-background .redux-color').wpColorPicker({
			change: function(u, ui) {
				redux_change($(this));
				$('#' + u.target.id + '-transparency').removeAttr('checked');
				$(this).val( ui.color.toString() );
				$.reduxBackground.preview($(this));
			}
		});
	};

	// Update the background preview
	$.reduxBackground.preview = function(selector) {

		var parent = selector.parents('.redux-container-background:first');
		var preview = $(parent).find('.background-preview');

		if (!preview) { // No preview present
			return;
		}

		var split = parent.data('id')+'][',
			css = 'height:'+preview.height()+'px;',
			the_id = parent.find('.upload-id').attr('name');
		the_id = the_id.replace('[media][id]', '');

		$(parent).find('.redux-background-input').each(function() {
			var data = $(this).serializeArray();

			data = data[0];

			if (data && data.name.indexOf('[background-') != -1) {
				if (data.value !== "") {
					data.name = data.name.split(split);
					data.name = data.name[1].replace(']', '');

					window._wpCustomizeSettings.settings[the_id].value[data.name] = data.value

					if (data.name == "background-image") {
						css += data.name+':url("'+data.value+'");';
					} else {
						css += data.name+':'+data.value+';';
					}
				}
			}
		});

		preview.attr('style', css).fadeIn();

		// customizer preview
		// Notify the customizer api about this change
		api.trigger('change');
		api.instance(the_id).previewer.refresh();

	};

	// Add a file via the wp.media function
	$.reduxBackground.addImage = function (event, selector) {

		event.preventDefault();

		var frame;
		var jQueryel = jQuery(this);

		// If the media frame already exists, reopen it.
		if ( frame ) {
			frame.open();
			return;
		}

		// Create the media frame.
		frame = wp.media({
			multiple: false,
			library: {
				//type: 'image' //Only allow images
			},
			// Set the title of the modal.
			title: jQueryel.data('choose'),

			// Customize the submit button.
			button: {
				// Set the text of the button.
				text: jQueryel.data('update')
				// Tell the button not to close the modal, since we're
				// going to refresh the page when the image is selected.

			}
		});

		// When an image is selected, run a callback.
		frame.on( 'select', function() {
			// Grab the selected attachment.
			var attachment = frame.state().get('selection').first();
			frame.close();

			if ( attachment.attributes.type !== "image") {
				return;
			}

			selector.find('.upload').val(attachment.attributes.url);
			selector.find('.upload-id').val(attachment.attributes.id);
			selector.find('.upload-height').val(attachment.attributes.height);
			selector.find('.upload-width').val(attachment.attributes.width);
			redux_change( jQuery(selector).find( '.upload-id' ) );
			var thumbSrc = attachment.attributes.url;
			if (typeof attachment.attributes.sizes !== 'undefined' && typeof attachment.attributes.sizes.thumbnail !== 'undefined') {
				thumbSrc = attachment.attributes.sizes.thumbnail.url;
			} else if ( typeof attachment.attributes.sizes !== 'undefined' ) {
				var height = attachment.attributes.height;
				for (var key in attachment.attributes.sizes) {
					var object = attachment.attributes.sizes[key];
					if (object.height < height) {
						height = object.height;
						thumbSrc = object.url;
					}
				}
			} else {
				thumbSrc = attachment.attributes.icon;
			}
			selector.find('.upload-thumbnail').val(thumbSrc);
			if ( !selector.find('.upload').hasClass('noPreview') ) {
				selector.find('.screenshot').empty().hide().append('<img class="redux-option-image" src="' + thumbSrc + '">').slideDown('fast');
			}
			//selector.find('.media_upload_button').unbind();
			selector.find('.remove-image').removeClass('hide');//show "Remove" button
			selector.find('.redux-background-input-properties').slideDown();
			$.reduxBackground.preview(selector.find('.upload'));
		});

		// Finally, open the modal.
		frame.open();

		selector.find('.background-settings').slideDown(300);

	};

	// Update the background preview
	$.reduxBackground.removeImage = function(selector) {

		// This shouldn't have been run...
		if (!selector.find('.remove-image').addClass('hide')) {
			return;
		}
		selector.find('.remove-image').addClass('hide');//hide "Remove" button
		selector.find('.upload').val('');
		selector.find('.upload-id').val('');
		selector.find('.upload-height').val('');
		selector.find('.upload-width').val('');
		redux_change( jQuery(selector).find( '.upload-id' ) );
		selector.find('.redux-background-input-properties').hide();
		var screenshot = selector.find('.screenshot');

		// Hide the screenshot
		screenshot.slideUp();

		selector.find('.remove-file').unbind();
		// We don't display the upload button if .upload-notice is present
		// This means the user doesn't have the WordPress 3.5 Media Library Support
		if ( jQuery('.section-upload .upload-notice').length > 0 ) {
			jQuery('.background_upload_button').remove();
		}

		//$.reduxBackground.preview(selector);

		// customizer
		var the_id = selector.find('.upload-id').attr('name');
		the_id = the_id.replace('[media][id]', '');

		// Notify the customizer api about this change
		api.trigger('change');
		var this_api = api.instance(the_id),
			current_val = this_api.get();

		// we need to clear only the background image field
		if ( typeof current_val['background-image'] !== 'undefined' ) {
			current_val['background-image'] = '';
		}

		// but back an empty object but with the correct structure
		this_api.set(current_val);

		this_api.previewer.refresh();
		selector.find('.background-settings').slideUp(300);
	};

})(jQuery);
;/*
 Field Border (border)
 */


jQuery(document).ready(function() {

	jQuery(".redux-border-top, .redux-border-right, .redux-border-bottom, .redux-border-left, .redux-border-all").numeric({
		allowMinus   : false,
	});

	jQuery(".redux-border-style").select2({
		triggerChange: true,
		allowClear: true
	});

	jQuery('.redux-border-input').on('change', function() {
		var units = jQuery(this).parents('.redux-field:first').find('.field-units').val();
		if ( jQuery(this).parents('.redux-field:first').find('.redux-border-units').length !== 0 ) {
			units = jQuery(this).parents('.redux-field:first').find('.redux-border-units option:selected').val();
		}
		var value = jQuery(this).val();
		if( typeof units !== 'undefined' && value ) {
			value += units;
		}
		if ( jQuery(this).hasClass( 'redux-border-all' ) ) {
			jQuery(this).parents('.redux-field:first').find('.redux-border-value').each(function() {
				jQuery(this).val(value);
			});
		} else {
			jQuery('#'+jQuery(this).attr('rel')).val(value);
		}
	});
	jQuery('.redux-border-units').on('change', function() {
		jQuery(this).parents('.redux-field:first').find('.redux-border-input').change();
	});

});;
/*
 Field Button Set (button_set)
 */

/*global jQuery, document*/
jQuery(document).ready(function () {
	jQuery('.buttonset').each(function() {
		if ( jQuery(this).is(':checkbox') ) {
			jQuery(this).find('.buttonset-item').button();
		}
		jQuery(this).buttonset();
	});
});
;
/*
 Field Color (color)
 */

/*global jQuery, document, redux_change */
(function($){
	'use strict';

	$.redux = $.redux || {};

	var tcolour;

	$(document).ready(function(){
		$.redux.color();
	});

	$.redux.color = function(){
		$('.redux-color-init').wpColorPicker({
			change: function(u) {
				redux_change($(this));
				$('#' + u.target.id + '-transparency').removeAttr('checked');
			},
			clear: function() {
				redux_change($(this).parent().find('.redux-color-init'));
			}
		});

		$('.redux-color').on('focus', function() {
			$(this).data('oldcolor', $(this).val());
		});

		$('.redux-color').on('keyup', function() {
			var value = $(this).val();
			var color = redux_color_validate(this);
			var id = '#' + $(this).attr('id');
			if (value === "transparent") {
				$(this).parent().parent().find('.wp-color-result').css('background-color', 'transparent');
				$(id + '-transparency').attr('checked', 'checked');
			} else {
				$(id + '-transparency').removeAttr('checked');
				if (color && color !== $(this).val()) {
					$(this).val(color);
				}
			}
		});

		// Replace and validate field on blur
		$('.redux-color').on('blur', function() {
			var value = $(this).val();
			var id = '#' + $(this).attr('id');
			if (value === "transparent") {
				$(this).parent().parent().find('.wp-color-result').css('background-color', 'transparent');
				$(id + '-transparency').attr('checked', 'checked');
			} else {
				if (redux_color_validate(this) === value) {
					if (value.indexOf("#") !== 0) {
						$(this).val($(this).data('oldcolor'));
					}
				}
				$(id + '-transparency').removeAttr('checked');
			}
		});

		// Store the old valid color on keydown
		$('.redux-color').on('keydown', function() {
			$(this).data('oldkeypress', $(this).val());
		});

		// When transparency checkbox is clicked
		$('.color-transparency').on('click', function() {
			if ($(this).is(":checked")) {
				$('#' + $(this).data('id')).val('transparent');
				$('#' + $(this).data('id')).parent().parent().find('.wp-color-result').css('background-color', 'transparent');
			} else {
				if ($('#' + $(this).data('id')).val() === 'transparent') {
					$('#' + $(this).data('id')).val('');
				}
			}
		});
	};

})(jQuery);


// Name check, converts name to hex
function colourNameToHex(colour) {
	tcolour = colour.replace(/^\s\s*/, '').replace(/\s\s*$/, '').replace("#", "");
	var colours = {
		"aliceblue": "#f0f8ff",
		"antiquewhite": "#faebd7",
		"aqua": "#00ffff",
		"aquamarine": "#7fffd4",
		"azure": "#f0ffff",
		"beige": "#f5f5dc",
		"bisque": "#ffe4c4",
		"black": "#000000",
		"blanchedalmond": "#ffebcd",
		"blue": "#0000ff",
		"blueviolet": "#8a2be2",
		"brown": "#a52a2a",
		"burlywood": "#deb887",
		"cadetblue": "#5f9ea0",
		"chartreuse": "#7fff00",
		"chocolate": "#d2691e",
		"coral": "#ff7f50",
		"cornflowerblue": "#6495ed",
		"cornsilk": "#fff8dc",
		"crimson": "#dc143c",
		"cyan": "#00ffff",
		"darkblue": "#00008b",
		"darkcyan": "#008b8b",
		"darkgoldenrod": "#b8860b",
		"darkgray": "#a9a9a9",
		"darkgreen": "#006400",
		"darkkhaki": "#bdb76b",
		"darkmagenta": "#8b008b",
		"darkolivegreen": "#556b2f",
		"darkorange": "#ff8c00",
		"darkorchid": "#9932cc",
		"darkred": "#8b0000",
		"darksalmon": "#e9967a",
		"darkseagreen": "#8fbc8f",
		"darkslateblue": "#483d8b",
		"darkslategray": "#2f4f4f",
		"darkturquoise": "#00ced1",
		"darkviolet": "#9400d3",
		"deeppink": "#ff1493",
		"deepskyblue": "#00bfff",
		"dimgray": "#696969",
		"dodgerblue": "#1e90ff",
		"firebrick": "#b22222",
		"floralwhite": "#fffaf0",
		"forestgreen": "#228b22",
		"fuchsia": "#ff00ff",
		"gainsboro": "#dcdcdc",
		"ghostwhite": "#f8f8ff",
		"gold": "#ffd700",
		"goldenrod": "#daa520",
		"gray": "#808080",
		"green": "#008000",
		"greenyellow": "#adff2f",
		"honeydew": "#f0fff0",
		"hotpink": "#ff69b4",
		"indianred ": "#cd5c5c",
		"indigo ": "#4b0082",
		"ivory": "#fffff0",
		"khaki": "#f0e68c",
		"lavender": "#e6e6fa",
		"lavenderblush": "#fff0f5",
		"lawngreen": "#7cfc00",
		"lemonchiffon": "#fffacd",
		"lightblue": "#add8e6",
		"lightcoral": "#f08080",
		"lightcyan": "#e0ffff",
		"lightgoldenrodyellow": "#fafad2",
		"lightgrey": "#d3d3d3",
		"lightgreen": "#90ee90",
		"lightpink": "#ffb6c1",
		"lightsalmon": "#ffa07a",
		"lightseagreen": "#20b2aa",
		"lightskyblue": "#87cefa",
		"lightslategray": "#778899",
		"lightsteelblue": "#b0c4de",
		"lightyellow": "#ffffe0",
		"lime": "#00ff00",
		"limegreen": "#32cd32",
		"linen": "#faf0e6",
		"magenta": "#ff00ff",
		"maroon": "#800000",
		"mediumaquamarine": "#66cdaa",
		"mediumblue": "#0000cd",
		"mediumorchid": "#ba55d3",
		"mediumpurple": "#9370d8",
		"mediumseagreen": "#3cb371",
		"mediumslateblue": "#7b68ee",
		"mediumspringgreen": "#00fa9a",
		"mediumturquoise": "#48d1cc",
		"mediumvioletred": "#c71585",
		"midnightblue": "#191970",
		"mintcream": "#f5fffa",
		"mistyrose": "#ffe4e1",
		"moccasin": "#ffe4b5",
		"navajowhite": "#ffdead",
		"navy": "#000080",
		"oldlace": "#fdf5e6",
		"olive": "#808000",
		"olivedrab": "#6b8e23",
		"orange": "#ffa500",
		"orangered": "#ff4500",
		"orchid": "#da70d6",
		"palegoldenrod": "#eee8aa",
		"palegreen": "#98fb98",
		"paleturquoise": "#afeeee",
		"palevioletred": "#d87093",
		"papayawhip": "#ffefd5",
		"peachpuff": "#ffdab9",
		"peru": "#cd853f",
		"pink": "#ffc0cb",
		"plum": "#dda0dd",
		"powderblue": "#b0e0e6",
		"purple": "#800080",
		"red": "#ff0000",
		"redux": "#01a3e3",
		"rosybrown": "#bc8f8f",
		"royalblue": "#4169e1",
		"saddlebrown": "#8b4513",
		"salmon": "#fa8072",
		"sandybrown": "#f4a460",
		"seagreen": "#2e8b57",
		"seashell": "#fff5ee",
		"sienna": "#a0522d",
		"silver": "#c0c0c0",
		"skyblue": "#87ceeb",
		"slateblue": "#6a5acd",
		"slategray": "#708090",
		"snow": "#fffafa",
		"springgreen": "#00ff7f",
		"steelblue": "#4682b4",
		"tan": "#d2b48c",
		"teal": "#008080",
		"thistle": "#d8bfd8",
		"tomato": "#ff6347",
		"turquoise": "#40e0d0",
		"violet": "#ee82ee",
		"wheat": "#f5deb3",
		"white": "#ffffff",
		"whitesmoke": "#f5f5f5",
		"yellow": "#ffff00",
		"yellowgreen": "#9acd32"
	};
	if (colours[tcolour.toLowerCase()] !== 'undefined') {
		return colours[tcolour.toLowerCase()];
	}
	return colour;
}



// Run the validation
function redux_color_validate(field) {
	var value = jQuery(field).val();
	if (colourNameToHex(value) !== value.replace('#', '')) {
		return colourNameToHex(value);
	}
	return value;
}
;/*global jQuery, document, redux_change */
(function($){
	'use strict';

	$.redux = $.redux || {};

	var tcolour;

	$(document).ready(function(){
		$.redux.color_rgba();
	});

	$.redux.color_rgba = function(){
		$('.redux-color_rgba-init').minicolors({
			animationSpeed: 50,
			animationEasing: 'swing',
			inline: false,
			letterCase: 'lowercase',
			position: 'bottom left',
			theme: 'default',
			opacity: true,
			//theme: 'bootstrap',
			change: function(hex, opacity) {
				//console.log(hex + ' - ' + opacity);
				redux_change($(this));
				//$('#' + this.id + '-transparency').removeAttr('checked');
				//console.group("Trace"); 
				//console.log( $('#' + this.id + '-transparency').prop('checked') );
				//console.groupEnd();
				$('#' +$(this).data('id')+ '-transparency').removeAttr('checked');
				$('#' +$(this).data('id')+ '-alpha').val(opacity);
				//console.log('#' + this.id + '-transparency');
				//console.log($(this).minicolors('rgbaString'));
			}
		});

		$('.redux-color_rgba').on('focus', function() {
			$(this).data('oldcolor', $(this).val());
		});

		$('.redux-color_rgba').on('keyup', function() {
			var value = $(this).val();
			var color = redux_color_rgba_validate(this);
			var id = '#' + $(this).attr('id');
			if (value === "transparent") {
				$('#' + $(this).data('id')).parent().parent().find('.minicolors-swatch-color').attr('style', '');
				$(id + '-transparency').attr('checked', 'checked');
			} else {
				$(id + '-transparency').removeAttr('checked');
				if (color && color !== $(this).val()) {
					$(this).val(color);
				}
			}
		});

		// Replace and validate field on blur
		$('.redux-color_rgba').on('blur', function() {
			var value = $(this).val();
			var id = '#' + $(this).attr('id');
			if (value === "transparent") {
				$('#' + $(this).data('id')).parent().parent().find('.minicolors-swatch-color').attr('style', '');
				$(id + '-transparency').attr('checked', 'checked');
			} else {
				if (redux_color_validate(this) === value) {
					if (value.indexOf("#") !== 0) {
						$(this).val($(this).data('oldcolor'));
					}
				}
				$(id + '-transparency').removeAttr('checked');
			}
		});

		// Store the old valid color on keydown
		$('.redux-color_rgba').on('keydown', function() {
			$(this).data('oldkeypress', $(this).val());
		});

		// When transparency checkbox is clicked
//		$('.color_rgba-transparency').on('click', function() {
//			if ($(this).is(":checked")) {
//				$('#' + $(this).data('id')).val('transparent');
//				$('#' + $(this).data('id')).parent().parent().find('.minicolors-swatch-color').attr('style', '');
//			} else {
//				if ($('#' + $(this).data('id')).val() === 'transparent') {
//					$('#' + $(this).data('id')).val('');
//				}
//			}
//		});

		$('.color_rgba-transparency').on('click', function() {
			// Getting the specific input based from field ID
			var pfs = $(this).parent().parent().data('id');
			var op = $(this).parent().parent().find('.minicolors-swatch-color').css('opacity').substring(0,4);

			if ($(this).is(":checked")) {

				//Set data-opacity attribute to 0.00 when transparent checkbox is check
				$('#' + $(this).data('id')).attr('data-opacity','0.00');

				//Set hidded input value alpha opacity to 0.00 when transparent checkbox is check
				$('#' + pfs + '-alpha').val('0.00');

				//Hide .minicolors-swatch-color SPAN when its check
				$('#' + $(this).data('id')).parent().parent().find('.minicolors-swatch-color').css('display','none');
			} else {

				//might need to restore data-opacity attribute and hidden input alpha value when uncheck
				$('#' + $(this).data('id')).attr('data-opacity', op);
				$('#' + pfs + '-alpha').val(op);
				//Unhide .minicolors-swatch-color SPAN when its check
				$('#' + $(this).data('id')).parent().parent().find('.minicolors-swatch-color').css('display','');
			}
		});

		//Unhide .minicolors-swatch-color SPAN when its check on redux-color_rgba input focus
		$('.redux-color_rgba').on('focus', function() {

			var op = $(this).parent().find('.minicolors-swatch-color').css('opacity').substring(0,4);

			// re-store data-opacity value of the input field
			$(this).attr('data-opacity', op);

			// re-store alpha hidden input value (not really nescessary)
			$('#' + $(this).parent().parent().data('id') + '-alpha').val(op);

			//unhide .mini-swatch-color
			$(this).parent().find('.minicolors-swatch-color').css('display','');
		});

	};

})(jQuery);



// Run the validation
function redux_color_rgba_validate(field) {
	var value = jQuery(field).val();
	/*
	 if (colourNameToHex(value) !== value.replace('#', '')) {
	 return colourNameToHex(value);
	 }
	 */
	return value;
}
;/*global jQuery*/

jQuery(document).ready(function () {
	jQuery('.redux-datepicker').each(function(){
		jQuery(this).datepicker();
	});
});;jQuery(document).ready(function() {

	jQuery(".redux-dimensions-height, .redux-dimensions-width").numeric({
		//allowMinus   : false,
	});

	jQuery(".redux-dimensions-units").select2({
		width: 'resolve',
		triggerChange: true,
		allowClear: true
	});

	jQuery('.redux-dimensions-input').on('change', function() {
		var units = jQuery(this).parents('.redux-field:first').find('.field-units').val();
		if ( jQuery(this).parents('.redux-field:first').find('.redux-dimensions-units').length !== 0 ) {
			units = jQuery(this).parents('.redux-field:first').find('.redux-dimensions-units option:selected').val();
		}
		if( typeof units !== 'undefined' ) {
			jQuery('#'+jQuery(this).attr('rel')).val(jQuery(this).val()+units);
		} else {
			jQuery('#'+jQuery(this).attr('rel')).val(jQuery(this).val());
		}
	});

	jQuery('.redux-dimensions-units').on('change', function() {
		jQuery(this).parents('.redux-field:first').find('.redux-dimensions-input').change();
	});

});;/* global redux_change, wp */
(function($){
	"use strict";

	$.gallery = $.gallery || {};

	$(document).ready(function () {
		//gallery insert functionality
		$.gallery();
	});

	$.gallery = function(){
		// When the user clicks on the Add/Edit gallery button, we need to display the gallery editing
		$('body').on({
			click: function(event){
				var current_gallery = $(this).closest('fieldset');

				if (event.currentTarget.id === 'clear-gallery') {
					//remove value from input

					var rmVal = current_gallery.find('.gallery_values').val('');

					//remove preview images
					current_gallery.find(".screenshot").html("");

					return;

				}

				// Make sure the media gallery API exists
				if ( typeof wp === 'undefined' || ! wp.media || ! wp.media.gallery ) {
					return;
				}
				event.preventDefault();

				// Activate the media editor
				var $$ = $(this);

				var val = current_gallery.find('.gallery_values').val();
				var final;
				if (!val) {
					final = '[gallery ids="0"]';
				} else {
					final = '[gallery ids="' + val + '"]';
				}

				var frame = wp.media.gallery.edit(final);


				// When the gallery-edit state is updated, copy the attachment ids across
				frame.state('gallery-edit').on( 'update', function( selection ) {

					//clear screenshot div so we can append new selected images
					current_gallery.find(".screenshot").html("");

					var element, preview_html= "", preview_img;
					var ids = selection.models.map(function(e){
						element = e.toJSON();
						preview_img = typeof element.sizes.thumbnail !== 'undefined'  ? element.sizes.thumbnail.url : element.url ;
						preview_html = "<a class='of-uploaded-image' href='"+preview_img+"'><img class='redux-option-image' src='"+preview_img+"' alt='' /></a>";
						current_gallery.find(".screenshot").append(preview_html);
						return e.id;
					});
					current_gallery.find('.gallery_values').val(ids.join(','));
					redux_change( current_gallery.find( '.gallery_values' ) );

				});


				return false;
			}
		}, '.gallery-attachments');
	};
})(jQuery);;/* global redux_change */
(function($){
	"use strict";

	$.redux.group = $.group || {};

	$(document).ready(function () {
		//Group functionality
		$.redux.group();
	});

	$.redux.group = function(){
		$("#redux-groups-accordion")
			.accordion({
				header: "> div > h3",
				collapsible: true,
				active: false,
				heightStyle: "content",
				icons: {
					"header": "ui-icon-plus",
					"activeHeader": "ui-icon-minus"
				}
			})
			.sortable({
				axis: "y",
				handle: "h3",
				stop: function (event, ui) {
					// IE doesn't register the blur when sorting
					// so trigger focusout handlers to remove .ui-state-focus
					ui.item.children("h3").triggerHandler("focusout");
					var inputs = $('input.slide-sort');
					inputs.each(function(idx) {
						$(this).val(idx);
					});
				}
			});

		$('.redux-groups-accordion-group input[data-title="true"]').on('keyup',function(event) {
			$(this).closest('.redux-groups-accordion-group').find('.redux-groups-header').text(event.target.value);
			$(this).closest('.redux-groups-accordion-group').find('.slide-title').val(event.target.value);
		});

		$('.redux-groups-remove').live('click', function () {
			redux_change($(this));
			$(this).parent().find('input[type="text"]').val('');
			$(this).parent().find('input[type="hidden"]').val('');
			$(this).parent().parent().slideUp('medium', function () {
				$(this).remove();
			});
		});

		$('.redux-groups-add').click(function () {

			var newSlide = $(this).prev().find('.redux-dummy').clone(true).show();
			var slideCounter = $(this).parent().find('.redux-dummy-slide-count');
			// Count # of slides
			var slideCount = slideCounter.val();
			// Update the slideCounter
			slideCounter.val(parseInt(slideCount)+1 );
			// REMOVE var slideCount1 = slideCount*1 + 1;

			//$(newSlide).find('h3').text('').append('<span class="redux-groups-header">New Group</span><span class="ui-accordion-header-icon ui-icon ui-icon-plus"></span>');
			$(this).prev().append(newSlide);

			// Remove dummy classes from newSlide
			$(newSlide).removeClass("redux-dummy");

			$(newSlide).find('input[type="text"], input[type="hidden"], textarea , select').each(function(){
				var attr_name = $(this).data('name');
				var attr_id = $(this).attr('id');
				// For some browsers, `attr` is undefined; for others,
				// `attr` is false.  Check for both.
				if (typeof attr_id !== 'undefined' && attr_id !== false) {
					$(this).attr("id", $(this).attr("id").replace("@", slideCount) );
				}
				if (typeof attr_name !== 'undefined' && attr_name !== false) {
					$(this).attr("name", $(this).data("name").replace("@", slideCount) );
				}

				if($(this).prop("tagName") == 'SELECT') {
					//we clean select2 first
					$(newSlide).find('.select2-container').remove();
					$(newSlide).find('select').removeClass('select2-offscreen');
				}

				$(this).val('');
				if ($(this).hasClass('slide-sort')){
					$(this).val(slideCount);
				}
			});
		});
	};
})(jQuery);
;/* global confirm, redux, redux_change */

jQuery(document).ready(function() {

	// On label click, change the input and class
	jQuery('.redux-image-select label img, .redux-image-select label .tiles').click(function(e) {
		var id = jQuery(this).closest('label').attr('for');
		jQuery(this).parents("fieldset:first").find('.redux-image-select-selected').removeClass('redux-image-select-selected');
		jQuery(this).closest('label').find('input[type="radio"]').prop('checked');
		if (jQuery(this).closest('label').hasClass('redux-image-select-preset-' + id)) { // If they clicked on a preset, import!
			e.preventDefault();
			var presets = jQuery(this).closest('label').find('input');
			var data = presets.data('presets');
			if (presets !== undefined && presets !== null) {
				var answer = confirm(redux.args.preset_confirm);
				if (answer) {
					jQuery('label[for="' + id + '"]').addClass('redux-image-select-selected').find("input[type='radio']").attr("checked", true);
					window.onbeforeunload = null;
					jQuery('#import-code-value').val(JSON.stringify(data));
					jQuery('#redux-import').click();
				}
			} else {
			}
			return false;
		} else {
			redux_change(jQuery(this).closest('label').find('input[type="radio"]'));
			jQuery('label[for="' + id + '"]').addClass('redux-image-select-selected').find("input[type='radio']").attr("checked", true);
		}
	});

	// Used to display a full image preview of a tile/pattern
	jQuery('.tiles').qtip({
		content: {
			text: function(event, api) {
				return "<img src='" + jQuery(this).attr('rel') + "' style='max-width:150px;' alt='' />";
			},
		},
		style: 'qtip-tipsy',
		position: {
			my: 'top center', // Position my top left...
			at: 'bottom center', // at the bottom right of...
		}
	});
});
;(function($) {
	"use strict";

	$(document).ready(function() {
		$('#redux-import').click(function(e) {
			if ($('#import-code-value').val() === "" && $('#import-link-value').val() === "") {
				e.preventDefault();
				return false;
			}
		});

		$('#redux-import-code-button').click(function() {
			if ($('#redux-import-link-wrapper').is(':visible')) {
				$('#redux-import-link-wrapper').hide();
				$('#import-link-value').val('');
			}
			$('#redux-import-code-wrapper').fadeIn('fast');
		});

		$('#redux-import-link-button').click(function() {
			if ($('#redux-import-code-wrapper').is(':visible')) {
				$('#redux-import-code-wrapper').hide();
				$('#import-code-value').val('');
			}
			$('#redux-import-link-wrapper').fadeIn('fast');
		});

		$('#redux-export-code-copy').click(function() {
			if ($('#redux-export-link-value').is(':visible')) {
				$('#redux-export-link-value').hide();
			}
			$('#redux-export-code').fadeIn('fast');
		});

		$('#redux-export-link').click(function() {
			if ($('#redux-export-code').is(':visible')) {
				$('#redux-export-code').hide();
			}
			$('#redux-export-link-value').fadeIn('fast');
		});

	});
})(jQuery);
;/* global redux_change, wp */

// Add a file via the wp.media function
function redux_add_file(event, selector) {

	event.preventDefault();

	var frame;
	var jQueryel = jQuery(this);

	// If the media frame already exists, reopen it.
	if ( frame ) {
		frame.open();
		return;
	}

	// Create the media frame.
	frame = wp.media({
		multiple: false,
		library: {
			//type: 'image' //Only allow images
		},
		// Set the title of the modal.
		title: jQueryel.data('choose'),

		// Customize the submit button.
		button: {
			// Set the text of the button.
			text: jQueryel.data('update')
			// Tell the button not to close the modal, since we're
			// going to refresh the page when the image is selected.

		}
	});

	// When an image is selected, run a callback.
	frame.on( 'select', function() {

		// Grab the selected attachment.
		var attachment = frame.state().get('selection').first();
		frame.close();

		if ( typeof redux.media[jQuery(selector).attr('data-id')] === 'undefined' ) {
			redux.media[jQuery(selector).attr('data-id')] = {};
			redux.media[jQuery(selector).attr('data-id')].mode = "image";
		}

		if ( redux.media[jQuery(selector).attr('data-id')].mode !== false && attachment.attributes.type !== redux.media[jQuery(selector).attr('data-id')].mode) {
			return;
		}

		selector.find('.upload').attr('value',attachment.attributes.url);
		selector.find('.upload-id').attr('value',attachment.attributes.id);
		selector.find('.upload-height').attr('value',attachment.attributes.height);
		selector.find('.upload-width').attr('value',attachment.attributes.width);
		redux_change( jQuery(selector).find( '.upload-id' ) );
		var thumbSrc = attachment.attributes.url;
		if (typeof attachment.attributes.sizes !== 'undefined' && typeof attachment.attributes.sizes.thumbnail !== 'undefined') {
			thumbSrc = attachment.attributes.sizes.thumbnail.url;
		} else if ( typeof attachment.attributes.sizes !== 'undefined' ) {
			var height = attachment.attributes.height;
			for (var key in attachment.attributes.sizes) {
				var object = attachment.attributes.sizes[key];
				if (object.height < height) {
					height = object.height;
					thumbSrc = object.url;
				}
			}
		} else {
			thumbSrc = attachment.attributes.icon;
		}
		selector.find('.upload-thumbnail').val(thumbSrc);
		if ( !selector.find('.upload').hasClass('noPreview') ) {
			selector.find('.screenshot').empty().hide().append('<img class="redux-option-image" src="' + thumbSrc + '">').slideDown('fast');
		}
		//selector.find('.media_upload_button').unbind();
		selector.find('.remove-image').removeClass('hide');//show "Remove" button
		selector.find('.redux-background-properties').slideDown();


		var api = wp.customize,
			the_id = selector.find('.upload-id').attr('id');

		the_id = the_id.replace('[id]', '');

		window._wpCustomizeSettings.settings[the_id].value.url = attachment.attributes.url;
		window._wpCustomizeSettings.settings[the_id].value.id = attachment.attributes.id;
		window._wpCustomizeSettings.settings[the_id].value.height = attachment.attributes.height;
		window._wpCustomizeSettings.settings[the_id].value.width = attachment.attributes.width;
		window._wpCustomizeSettings.settings[the_id].value.thumbnail = attachment.attributes.thumbnail;

//		// Notify the customizer api about this change
		api.trigger('change');
		api.instance(the_id).previewer.refresh();

	});

	// Finally, open the modal.
	frame.open();
}


// Function to remove the image on click. Still requires a save
function redux_remove_file(selector) {

	// This shouldn't have been run...
	if (!selector.find('.remove-image').addClass('hide')) {
		return;
	}
	selector.find('.remove-image').addClass('hide');//hide "Remove" button
	selector.find('.upload').val('');
	selector.find('.upload-id').val('');
	selector.find('.upload-height').val('');
	selector.find('.upload-width').val('');
	selector.find('.upload-thumbnail').val('');
	redux_change( jQuery(selector).find( '.upload-id' ) );
	selector.find('.redux-background-properties').hide();
	var screenshot = selector.find('.screenshot');

	// Hide the screenshot
	screenshot.slideUp();

	selector.find('.remove-file').unbind();
	// We don't display the upload button if .upload-notice is present
	// This means the user doesn't have the WordPress 3.5 Media Library Support
	if ( jQuery('.section-upload .upload-notice').length > 0 ) {
		jQuery('.media_upload_button').remove();
	}

}

(function(exports, $){
	"use strict";

	$.redux = $.redux || {};

	$(document).ready(function () {
		$.redux.media();
	});

	/**
	 * Media Uploader
	 * Dependencies		: jquery, wp media uploader
	 * Feature added by	: Smartik - http://smartik.ws/
	 * Date				: 05.28.2013
	 */
	$.redux.media = function(){
		// Remove the image button
		$('.remove-image, .remove-file').unbind('click').on('click', function() {
			redux_remove_file( $(this).parents('fieldset.redux-field:first') );
		});

		// Upload media button
		$('.media_upload_button').unbind().on('click', function( event ) {
			redux_add_file( event, $(this).parents('fieldset.redux-field:first') );
		});
	};

})(wp, jQuery);


;/* global redux_change */
(function($){
	"use strict";

	$.redux = $.redux || {};

	$(document).ready(function () {
		//multi text functionality
		$.redux.multi_text();
	});

	$.redux.multi_text = function(){
		$('.redux-multi-text-remove').live('click', function() {
			redux_change($(this));
			$(this).prev('input[type="text"]').val('');
			$(this).parent().slideUp('medium', function(){
				$(this).remove();
			});
		});

		$('.redux-multi-text-add').click(function(){
			var number = parseInt($(this).attr('data-add_number'));
			var id = $(this).attr('data-id');
			var name = $(this).attr('data-name');
			for (var i = 0; i < number; i++) {
				var new_input = $('#'+id+' li:last-child').clone();
				$('#'+id).append(new_input);
				$('#'+id+' li:last-child').removeAttr('style');
				$('#'+id+' li:last-child input[type="text"]').val('');
				$('#'+id+' li:last-child input[type="text"]').attr('name' , name);
			}
		});
	};
})(jQuery);;/* global redux_change */
(function($) {
	"use strict";

	$.redux = $.redux || {};

	$(document).ready(function() {
		$.redux.select();
	});

	$.redux.select = function() {
		$('select.redux-select-item').each(function() {

			var default_params = {
				width: 'resolve',
				triggerChange: true,
				allowClear: true
			};

			if ($(this).siblings('.select2_params').size() > 0) {
				var select2_params = $(this).siblings('.select2_params').val();
				select2_params = JSON.parse(select2_params);
				default_params = $.extend({}, default_params, select2_params);
			}

			if ($(this).hasClass('font-icons')) {
				default_params = $.extend({}, {formatResult: addIconToSelect, formatSelection: addIconToSelect, escapeMarkup: function(m) {
					return m;
				}}, default_params);
			}
			$(this).select2(default_params);
			if ($(this).hasClass('select2-sortable')) {
				default_params = {};
				default_params.bindOrder = 'sortableStop';
				default_params.sortableOptions = {placeholder: 'ui-state-highlight'};
				$(this).select2Sortable(default_params);
			}

			$(this).on("change", function() {
				redux_change($($(this)));
				$(this).select2SortableOrder();
			});

		});
	};

	function addIconToSelect(icon) {
		if (icon.hasOwnProperty('id')) {
			return "<span class='elusive'><i class='" + icon.id + "'></i>" + "&nbsp;&nbsp;" + icon.id.toUpperCase() + "</span>";
		}
	}
})(jQuery);;(function($){

	$('.redux-select-image-item').on('change', function() {
		var preview = $(this).parents('.redux-field:first').find('.redux-preview-image');
		if ($(this).val() === "") {
			preview.fadeOut('medium', function() {
				preview.attr('src', '');
			});
		} else {
			preview.attr('src', $(this).val());
			preview.fadeIn().css('visibility', 'visible');
		}
	});

})(jQuery);


;(function($) {
	"use strict";

	// Return true for float value, false otherwise
	function is_float (mixed_var) {
		return +mixed_var === mixed_var && (!(isFinite(mixed_var))) || Boolean((mixed_var % 1));
	}

	// Return number of integers after the decimal point.
	function decimalCount(res){
		var q = res.toString().split('.');
		return q[1].length;
	}

	function loadSelect(myClass, min, max, res, step){

		//var j = step + ((decCount ) - (step )); //  18;

		for( var i = min; i <= max; i=i+res ){
			//var step = 2;

			//if (j === (step + ((decCount ) - (step )))) {
			var n = i;
			if (is_float(res)){
				var decCount = decimalCount(res);
				n = i.toFixed(decCount);
			}

			$(myClass).append(
				'<option value="' + n + '">' + n + '</option>'
			);
			//j = 0;
			//}
			//j++;
		}
	}

	$(document).ready(function() {
		$('div.redux-slider-container').each(function() {

			var start, toClass, defClassOne, defClassTwo, connectVal;
			var DISPLAY_NONE    = 0;
			var DISPLAY_LABEL   = 1;
			var DISPLAY_TEXT    = 2;
			var DISPLAY_SELECT  = 3;

			var mainID          = $(this).data('id');

			var minVal          = $(this).data('min');
			var maxVal          = $(this).data('max');
			var stepVal         = $(this).data('step');
			var handles         = $(this).data('handles');
			var defValOne       = $(this).data('default-one');
			var defValTwo       = $(this).data('default-two');
			var resVal          = $(this).data('resolution');
			var displayValue    = parseInt(($(this).data('display')));
			var rtlVal          = Boolean($(this).data('rtl'));
			var floatMark       = ($(this).data('float-mark'));

			var rtl;
			if (rtlVal === true) {
				rtl = 'rtl';
			} else {
				rtl = 'ltr';
			}

			// range array
			var range = [minVal, maxVal];


			// Set default values for dual slides.
			var startTwo = [defValOne, defValTwo];

			// Set default value for single slide
			var startOne = [defValOne];

			var inputOne, inputTwo;
			if (displayValue == DISPLAY_TEXT) {
				defClassOne = $('.redux-slider-input-one-' + mainID);
				defClassTwo = $('.redux-slider-input-two-' + mainID);

				inputOne = defClassOne;
				inputTwo = defClassTwo;
			} else if (displayValue == DISPLAY_SELECT) {
				defClassOne = $('.redux-slider-select-one-' + mainID);
				defClassTwo = $('.redux-slider-select-two-' + mainID);

				loadSelect(defClassOne, minVal, maxVal, resVal, stepVal);

				if (handles === 2) {
					loadSelect(defClassTwo, minVal, maxVal, resVal, stepVal);
				}

			} else if (displayValue == DISPLAY_LABEL) {
				defClassOne = $('#redux-slider-label-one-' + mainID);
				defClassTwo = $('#redux-slider-label-two-' + mainID);
			} else if (displayValue == DISPLAY_NONE) {
				defClassOne = $('.redux-slider-value-one-' + mainID);
				defClassTwo = $('.redux-slider-value-two-' + mainID);
			}

			var classOne, classTwo;
			if (displayValue == DISPLAY_LABEL) {
				var x = [defClassOne, 'html'];
				var y = [defClassTwo, 'html'];

				classOne = [x];
				classTwo = [x, y];
			} else {
				classOne = [defClassOne];
				classTwo = [defClassOne, defClassTwo];
			}

			if (handles === 2) {
				start       = startTwo;
				toClass     = classTwo;
				connectVal  = true;
			} else {
				start       = startOne;
				toClass     = classOne;
				connectVal  = 'lower';
			}

			var slider = $(this).noUiSlider({
				range:      range,
				start:      start,
				handles:    handles,
				step:       stepVal,
				connect:    connectVal,
				behaviour:  "tap-drag",
				direction:  rtl,

				serialization: {
					resolution: resVal,
					to:         toClass,
					mark:       floatMark
				},
				slide: function() {
					if (displayValue == DISPLAY_LABEL) {
						if (handles === 2) {
							var inpSliderVal = slider.val();
							$('input.redux-slider-value-one-' + mainID).attr('value', inpSliderVal[0]);
							$('input.redux-slider-value-two-' + mainID).attr('value', inpSliderVal[1]);
						} else {
							$('input.redux-slider-value-one-' + mainID).attr('value', slider.val());
						}
					}

					if (displayValue == DISPLAY_SELECT) {
						$('.redux-slider-select-one').select2('val', slider.val()[0]);

						if (handles === 2) {
							$('.redux-slider-select-two').select2('val', slider.val()[1]);
						}
					}

					// Uncomment when selectize is live
					// var selectize = select[0].selectize;
					// selectize.setValue(slider.val()[0]);
					redux_change(jQuery(this).parents('.redux-field-container:first').find('input'));
					$('.redux-slider-input-one-' + mainID).trigger('change');

				}
			});

			if (displayValue === DISPLAY_TEXT) {
				inputOne.keydown(function( e ) {

					var sliderOne = slider.val();
					var value = parseInt( sliderOne[0] );

					switch ( e.which ) {
						case 38:
							slider.val([value + 1, null] );
							break;
						case 40:
							slider.val([value - 1, null]);
							break;
						case 13:
							e.preventDefault();
							break;
					}
				});

				if (handles === 2) {
					inputTwo.keydown(function( e ) {
						var sliderTwo = slider.val();
						var value = parseInt(sliderTwo[1]);

						switch ( e.which ) {
							case 38:
								slider.val([null, value + 1] );
								break;
							case 40:
								slider.val([null, value - 1] );
								break;
							case 13:
								e.preventDefault();
								break;
						}
					});
				}
			}
		});
		$('select.redux-slider-select-one, select.redux-slider-select-two').select2({
			width: 'resolve',
			triggerChange: true,
			allowClear: true
		});
//        select = $('.slider-select').selectize({
//            create: true,
//            sortField: 'text'
//        });        
	});
})(jQuery);
;/* global redux_change, wp */

jQuery(document).ready(function () {

	jQuery('.redux-slides-remove').live('click', function () {
		redux_change(jQuery(this));
		jQuery(this).parent().siblings().find('input[type="text"]').val('');
		jQuery(this).parent().siblings().find('textarea').val('');
		jQuery(this).parent().siblings().find('input[type="hidden"]').val('');

		var slideCount = jQuery(this).parents('.redux-container-slides:first').find('.redux-slides-accordion-group').length;

		if (slideCount > 1) {
			jQuery(this).parents('.redux-slides-accordion-group:first').slideUp('medium', function () {
				jQuery(this).remove();
			});
		} else {
			jQuery(this).parents('.redux-slides-accordion-group:first').find('.remove-image').click();
			jQuery(this).parents('.redux-container-slides:first').find('.redux-slides-accordion-group:last').find('.redux-slides-header').text("New Slide");
		}
	});

	jQuery('.redux-slides-add').click(function () {

		var newSlide = jQuery(this).prev().find('.redux-slides-accordion-group:last').clone(true);
		var slideCount = jQuery(newSlide).find('input[type="text"]').attr("name").match(/[0-9]+(?!.*[0-9])/);
		var slideCount1 = slideCount*1 + 1;

		jQuery(newSlide).find('input[type="text"], input[type="hidden"], textarea').each(function(){

			jQuery(this).attr("name", jQuery(this).attr("name").replace(/[0-9]+(?!.*[0-9])/, slideCount1) ).attr("id", jQuery(this).attr("id").replace(/[0-9]+(?!.*[0-9])/, slideCount1) );
			jQuery(this).val('');
			if (jQuery(this).hasClass('slide-sort')){
				jQuery(this).val(slideCount1);
			}
		});

		jQuery(newSlide).find('.screenshot').removeAttr('style');
		jQuery(newSlide).find('.screenshot').addClass('hide');
		jQuery(newSlide).find('.screenshot a').attr('href', '');
		jQuery(newSlide).find('.remove-image').addClass('hide');
		jQuery(newSlide).find('.redux-slides-image').attr('src', '').removeAttr('id');
		jQuery(newSlide).find('h3').text('').append('<span class="redux-slides-header">New slide</span><span class="ui-accordion-header-icon ui-icon ui-icon-plus"></span>');
		jQuery(this).prev().append(newSlide);
	});

	jQuery('.slide-title').keyup(function(event) {
		var newTitle = event.target.value;
		jQuery(this).parents().eq(3).find('.redux-slides-header').text(newTitle);
	});

	jQuery(function () {
		jQuery(".redux-slides-accordion")
			.accordion({
				header: "> div > fieldset > h3",
				collapsible: true,
				active: false,
				heightStyle: "content",
				icons: { "header": "ui-icon-plus", "activeHeader": "ui-icon-minus" }
			})
			.sortable({
				axis: "y",
				handle: "h3",
				connectWith: ".redux-slides-accordion",
				start: function(e, ui) {
					ui.placeholder.height(ui.item.height());
					ui.placeholder.width(ui.item.width());
				},
				placeholder: "ui-state-highlight",
				stop: function (event, ui) {
					// IE doesn't register the blur when sorting
					// so trigger focusout handlers to remove .ui-state-focus
					ui.item.children("h3").triggerHandler("focusout");
					var inputs = jQuery('input.slide-sort');
					inputs.each(function(idx) {
						jQuery(this).val(idx);
					});
				}
			});
	});




});;/*global jQuery, document, redux_change */

jQuery(document).ready(function() {

	jQuery( ".redux-sortable" ).sortable({
		handle: ".drag",
		placeholder: "ui-state-highlight",
		opacity: 0.7,
		update: function() {
			redux_change(jQuery(this));
		}
	});

	jQuery('.checkbox_sortable').on('click', function() {
		if (jQuery(this).is(":checked")) {
			jQuery('#'+jQuery(this).attr('rel')).val(1);
		} else {
			jQuery('#'+jQuery(this).attr('rel')).val('');
		}
	});

});;jQuery(function() {
	/**        Sorter (Layout Manager) */
	jQuery('.redux-sorter').each(function() {
		var id = jQuery(this).attr('id');
		jQuery('#' + id).find('ul').sortable({
			items: 'li',
			placeholder: "placeholder",
			connectWith: '.sortlist_' + id,
			opacity: 0.6,
			update: function() {
				jQuery(this).find('.position').each(function() {
					var listID = jQuery(this).parent().attr('id');
					var parentID = jQuery(this).parent().parent().attr('id');
					parentID = parentID.replace(id + '_', '');
					redux_change(jQuery(this));
					var optionID = jQuery(this).parent().parent().parent().attr('id');
					jQuery(this).prop("name", redux.args.opt_name + '[' + optionID + '][' + parentID + '][' + listID + ']');
				});
			}
		});
	});

});;/* global redux, redux_opts */
/*
 * Field Sorter jquery function
 * Based on
 * [SMOF - Slightly Modded Options Framework](http://aquagraphite.com/2011/09/slightly-modded-options-framework/)
 * Version 1.4.2
 */

jQuery(function() {
	/**	Sorter (Layout Manager) */
	jQuery('.redux-sorter').each(function() {
		var id = jQuery(this).attr('id');
		jQuery('#' + id).find('ul').sortable({
			items: 'li',
			placeholder: "placeholder",
			connectWith: '.sortlist_' + id,
			opacity: 0.8,
			stop: function(event, ui) {
				var sorter = redux.sorter[jQuery(this).attr('data-id')];
				var id = jQuery(this).find('h3').text();

				if ( sorter.limits && id && sorter.limits[id] ) {
					if(jQuery(this).children('li').length >= sorter.limits[id]) {
						jQuery(this).addClass('filled');
						if (jQuery(this).children('li').length > sorter.limits[id]) {
							jQuery(ui.sender).sortable('cancel');
						}
					} else {
						jQuery(this).removeClass('filled');
					}
				}
			},
			update: function(event, ui) {

				var sorter = redux.sorter[jQuery(this).attr('data-id')];
				var id = jQuery(this).find('h3').text();
				if ( sorter.limits && id && sorter.limits[id] ) {
					if(jQuery(this).children('li').length >= sorter.limits[id]) {
						jQuery(this).addClass('filled');
						if (jQuery(this).children('li').length > sorter.limits[id]) {
							jQuery(ui.sender).sortable('cancel');
						}
					} else {
						jQuery(this).removeClass('filled');
					}
				}

				jQuery(this).find('.position').each(function() {
					var listID = jQuery(this).parent().attr('id');
					var parentID = jQuery(this).parent().parent().attr('data-group-id');
					redux_change(jQuery(this));
					var optionID = jQuery(this).parent().parent().parent().attr('id');
					jQuery(this).prop("name", redux.args.opt_name + '[' + optionID + '][' + parentID + '][' + listID + ']');
				});
			}
		});
	});

});;jQuery(document).ready(function() {

	jQuery(".redux-spacing-top, .redux-spacing-right, .redux-spacing-bottom, .redux-spacing-left, .redux-spacing-all").numeric({
		//allowMinus   : false,
	});

	jQuery(".redux-spacing-units").select2({
		width: 'resolve',
		triggerChange: true,
		allowClear: true
	});

	jQuery('.redux-spacing-input').on('change', function() {
		var units = jQuery(this).parents('.redux-field:first').find('.field-units').val();
		if ( jQuery(this).parents('.redux-field:first').find('.redux-spacing-units').length !== 0 ) {
			units = jQuery(this).parents('.redux-field:first').find('.redux-spacing-units option:selected').val();
		}
		var value = jQuery(this).val();
		if( typeof units !== 'undefined' && value ) {
			value += units;
		}
		if ( jQuery(this).hasClass( 'redux-spacing-all' ) ) {
			jQuery(this).parents('.redux-field:first').find('.redux-spacing-value').each(function() {
				jQuery(this).val(value);
			});
		} else {
			jQuery('#'+jQuery(this).attr('rel')).val(value);
		}
	});
	jQuery('.redux-spacing-units').on('change', function() {
		jQuery(this).parents('.redux-field:first').find('.redux-spacing-input').change();
	});

});;/* global redux_change */
jQuery(document).ready(function() {

	jQuery('.redux_spinner').each(function() {
		//slider init
		var spinner = redux.spinner[jQuery(this).attr('rel')];

		jQuery("#" + spinner.id).spinner({
			value: parseInt(spinner.val, null),
			min: parseInt(spinner.min, null),
			max: parseInt(spinner.max, null),
			step: parseInt(spinner.step, null),
			range: "min",
			slide: function(event, ui) {
				var input = jQuery("#" + spinner.id);
				input.val(ui.value);
				redux_change(input);
			}
		});

		// Limit input for negative
		var neg = false;
		if (parseInt(spinner.min, null) < 0) {
			neg = true;
		}

		jQuery("#" + spinner.id).numeric({
			allowMinus: neg,
			min: spinner.min,
			max: spinner.max
		});

	});

	// Update the slider from the input and vice versa
	jQuery(".spinner-input").keyup(function() {

		jQuery(this).addClass('spinnerInputChange');

	});

	function cleanSpinnerValue(value, selector, spinner) {

		if ( !selector.hasClass('spinnerInputChange') ) {
			return;
		}
		selector.removeClass('spinnerInputChange');

		if (value === "" || value === null) {
			value = spinner.min;
		} else if (value >= parseInt(spinner.max)) {
			value = spinner.max;
		} else if (value <= parseInt(spinner.min)) {
			value = spinner.min;
		} else {
			value = Math.round(value / spinner.step) * spinner.step;
		}

		jQuery("#" + spinner.id).val(value);

	}

	// Update the spinner from the input and vice versa
	jQuery(".spinner-input").blur(function() {
//        cleanSpinnerValue(jQuery(this).val(), jQuery(this), redux.spinner[jQuery(this).attr('id')]);
	});
	jQuery(".spinner-input").focus(function() {
		cleanSpinnerValue(jQuery(this).val(), jQuery(this), redux.spinner[jQuery(this).attr('id')]);
	});

	jQuery('.spinner-input').typeWatch({
		callback:function(value){
			cleanSpinnerValue(value, jQuery(this), redux.spinner[jQuery(this).attr('id')]);
		},
		wait:500,
		highlight:false,
		captureLength:1
	});

});
;/* global redux_change */
(function($){
	"use strict";

	$.redux = $.redux || {};

	$(document).ready(function () {
		$.redux.switch();
	});

	/**
	 * Switch
	 * Dependencies		: jquery
	 * Feature added by	: Smartik - http://smartik.ws/
	 * Date				: 03.17.2013
	 */
	$.redux.switch = function(){
		$(".cb-enable").click(function() {
			if ($(this).hasClass('selected')) {
				return;
			}
			var parent = $(this).parents('.switch-options');
			$('.cb-disable', parent).removeClass('selected');
			$(this).addClass('selected');
			$('.checkbox-input', parent).val(1);
			redux_change($('.checkbox-input', parent));
			//fold/unfold related options
			var obj = $(this);
			var $fold = '.f_' + obj.data('id');
			$($fold).slideDown('normal', "swing");
		});
		$(".cb-disable").click(function() {
			if ($(this).hasClass('selected')) {
				return;
			}
			var parent = $(this).parents('.switch-options');
			$('.cb-enable', parent).removeClass('selected');
			$(this).addClass('selected');
			$('.checkbox-input', parent).val(0);
			redux_change($('.checkbox-input', parent));
			//fold/unfold related options
			var obj = $(this);
			var $fold = '.f_' + obj.data('id');
			$($fold).slideUp('normal', "swing");
		});
		//disable text select(for modern chrome, safari and firefox is done via CSS)
		//if (($.browser.msie && $.browser.version < 10) || $.browser.opera) { 
		$('.cb-enable span, .cb-disable span').find().attr('unselectable', 'on');
		//}
	};
})(jQuery);;// jQuery List DragSort v0.5.1
// License: http://dragsort.codeplex.com/license
(function(b){b.fn.dragsort=function(k){if("destroy"==k)b(this.selector).trigger("dragsort-uninit");else{var f=b.extend({},b.fn.dragsort.defaults,k),h=[],a=null,l=null;this.each(function(k,j){b(j).is("table")&&1==b(j).children().size()&&b(j).children().is("tbody")&&(j=b(j).children().get(0));var m={draggedItem:null,placeHolderItem:null,pos:null,offset:null,offsetLimit:null,scroll:null,container:j,init:function(){var a=0==b(this.container).children().size()?"li":b(this.container).children(":first").get(0).tagName.toLowerCase(); ""==f.itemSelector&&(f.itemSelector=a);""==f.dragSelector&&(f.dragSelector=a);""==f.placeHolderTemplate&&(f.placeHolderTemplate="<"+a+">&nbsp;</"+a+">");b(this.container).attr("data-listidx",k).mousedown(this.grabItem).bind("dragsort-uninit",this.uninit);this.styleDragHandlers(!0)},uninit:function(){var a=h[b(this).attr("data-listidx")];b(a.container).unbind("mousedown",a.grabItem).unbind("dragsort-uninit");a.styleDragHandlers(!1)},getItems:function(){return b(this.container).children(f.itemSelector)}, styleDragHandlers:function(a){this.getItems().map(function(){return b(this).is(f.dragSelector)?this:b(this).find(f.dragSelector).get()}).css("cursor",a?"pointer":"")},grabItem:function(a){if(!(1!=a.which||b(a.target).is(f.dragSelectorExclude)||0<b(a.target).closest(f.dragSelectorExclude).size()||0==b(a.target).closest(f.itemSelector).size())){a.preventDefault();for(var c=a.target;!b(c).is(f.dragSelector);){if(c==this)return;c=c.parentNode}b(c).attr("data-cursor",b(c).css("cursor"));b(c).css("cursor", "move");var e=h[b(this).attr("data-listidx")],g=this,i=function(){e.dragStart.call(g,a);b(e.container).unbind("mousemove",i)};b(e.container).mousemove(i).mouseup(function(){b(e.container).unbind("mousemove",i);b(c).css("cursor",b(c).attr("data-cursor"))})}},dragStart:function(d){null!=a&&null!=a.draggedItem&&a.dropItem();a=h[b(this).attr("data-listidx")];a.draggedItem=b(d.target).closest(f.itemSelector);a.draggedItem.attr("data-origpos",b(this).attr("data-listidx")+"-"+a.getItems().index(a.draggedItem)); var c=parseInt(a.draggedItem.css("marginTop")),e=parseInt(a.draggedItem.css("marginLeft"));a.offset=a.draggedItem.offset();a.offset.top=d.pageY-a.offset.top+(isNaN(c)?0:c)-1;a.offset.left=d.pageX-a.offset.left+(isNaN(e)?0:e)-1;f.dragBetween||(c=0==b(a.container).outerHeight()?Math.max(1,Math.round(0.5+a.getItems().size()*a.draggedItem.outerWidth()/b(a.container).outerWidth()))*a.draggedItem.outerHeight():b(a.container).outerHeight(),a.offsetLimit=b(a.container).offset(),a.offsetLimit.right=a.offsetLimit.left+ b(a.container).outerWidth()-a.draggedItem.outerWidth(),a.offsetLimit.bottom=a.offsetLimit.top+c-a.draggedItem.outerHeight());c=a.draggedItem.height();e=a.draggedItem.width();"tr"==f.itemSelector?(a.draggedItem.children().each(function(){b(this).width(b(this).width())}),a.placeHolderItem=a.draggedItem.clone().attr("data-placeholder",!0),a.draggedItem.after(a.placeHolderItem),a.placeHolderItem.children().each(function(){b(this).css({borderWidth:0,width:b(this).width()+1,height:b(this).height()+1}).html("&nbsp;")})): (a.draggedItem.after(f.placeHolderTemplate),a.placeHolderItem=a.draggedItem.next().css({height:c,width:e}).attr("data-placeholder",!0));if("td"==f.itemSelector){var g=a.draggedItem.closest("table").get(0);b("<table id='"+g.id+"' style='border-width: 0px;' class='dragSortItem "+g.className+"'><tr></tr></table>").appendTo("body").children().append(a.draggedItem)}g=a.draggedItem.attr("style");a.draggedItem.attr("data-origstyle",g?g:"");a.draggedItem.css({position:"absolute",opacity:0.8,"z-index":999, height:c,width:e});a.scroll={moveX:0,moveY:0,maxX:b(document).width()-b(window).width(),maxY:b(document).height()-b(window).height()};a.scroll.scrollY=window.setInterval(function(){if(f.scrollContainer!=window)b(f.scrollContainer).scrollTop(b(f.scrollContainer).scrollTop()+a.scroll.moveY);else{var c=b(f.scrollContainer).scrollTop();if(0<a.scroll.moveY&&c<a.scroll.maxY||0>a.scroll.moveY&&0<c)b(f.scrollContainer).scrollTop(c+a.scroll.moveY),a.draggedItem.css("top",a.draggedItem.offset().top+a.scroll.moveY+ 1)}},10);a.scroll.scrollX=window.setInterval(function(){if(f.scrollContainer!=window)b(f.scrollContainer).scrollLeft(b(f.scrollContainer).scrollLeft()+a.scroll.moveX);else{var c=b(f.scrollContainer).scrollLeft();if(0<a.scroll.moveX&&c<a.scroll.maxX||0>a.scroll.moveX&&0<c)b(f.scrollContainer).scrollLeft(c+a.scroll.moveX),a.draggedItem.css("left",a.draggedItem.offset().left+a.scroll.moveX+1)}},10);b(h).each(function(a,b){b.createDropTargets();b.buildPositionTable()});a.setPos(d.pageX,d.pageY);b(document).bind("mousemove", a.swapItems);b(document).bind("mouseup",a.dropItem);f.scrollContainer!=window&&b(window).bind("DOMMouseScroll mousewheel",a.wheel)},setPos:function(d,c){var e=c-this.offset.top,g=d-this.offset.left;f.dragBetween||(e=Math.min(this.offsetLimit.bottom,Math.max(e,this.offsetLimit.top)),g=Math.min(this.offsetLimit.right,Math.max(g,this.offsetLimit.left)));this.draggedItem.parents().each(function(){if("static"!=b(this).css("position")&&(!b.browser.mozilla||"table"!=b(this).css("display"))){var a=b(this).offset(); e-=a.top;g-=a.left;return!1}});if(f.scrollContainer==window)c-=b(window).scrollTop(),d-=b(window).scrollLeft(),c=Math.max(0,c-b(window).height()+5)+Math.min(0,c-5),d=Math.max(0,d-b(window).width()+5)+Math.min(0,d-5);else var i=b(f.scrollContainer),h=i.offset(),c=Math.max(0,c-i.height()-h.top)+Math.min(0,c-h.top),d=Math.max(0,d-i.width()-h.left)+Math.min(0,d-h.left);a.scroll.moveX=0==d?0:d*f.scrollSpeed/Math.abs(d);a.scroll.moveY=0==c?0:c*f.scrollSpeed/Math.abs(c);this.draggedItem.css({top:e,left:g})}, wheel:function(d){if((b.browser.safari||b.browser.mozilla)&&a&&f.scrollContainer!=window){var c=b(f.scrollContainer),e=c.offset();d.pageX>e.left&&d.pageX<e.left+c.width()&&d.pageY>e.top&&d.pageY<e.top+c.height()&&(e=d.detail?5*d.detail:d.wheelDelta/-2,c.scrollTop(c.scrollTop()+e),d.preventDefault())}},buildPositionTable:function(){var d=[];this.getItems().not([a.draggedItem[0],a.placeHolderItem[0]]).each(function(a){var e=b(this).offset();e.right=e.left+b(this).outerWidth();e.bottom=e.top+b(this).outerHeight(); e.elm=this;d[a]=e});this.pos=d},dropItem:function(){if(null!=a.draggedItem){var d=a.draggedItem.attr("data-origstyle");a.draggedItem.attr("style",d);""==d&&a.draggedItem.removeAttr("style");a.draggedItem.removeAttr("data-origstyle");a.styleDragHandlers(!0);a.placeHolderItem.before(a.draggedItem);a.placeHolderItem.remove();b("[data-droptarget], .dragSortItem").remove();window.clearInterval(a.scroll.scrollY);window.clearInterval(a.scroll.scrollX);a.draggedItem.attr("data-origpos")!=b(h).index(a)+"-"+ a.getItems().index(a.draggedItem)&&f.dragEnd.apply(a.draggedItem);a.draggedItem.removeAttr("data-origpos");a.draggedItem=null;b(document).unbind("mousemove",a.swapItems);b(document).unbind("mouseup",a.dropItem);f.scrollContainer!=window&&b(window).unbind("DOMMouseScroll mousewheel",a.wheel);return!1}},swapItems:function(d){if(null==a.draggedItem)return!1;a.setPos(d.pageX,d.pageY);for(var c=a.findPos(d.pageX,d.pageY),e=a,g=0;-1==c&&f.dragBetween&&g<h.length;g++)c=h[g].findPos(d.pageX,d.pageY),e=h[g]; if(-1==c)return!1;var i=function(){return b(e.container).children().not(e.draggedItem)},d=i().not(f.itemSelector).each(function(){this.idx=i().index(this)});null==l||l.top>a.draggedItem.offset().top||l.left>a.draggedItem.offset().left?b(e.pos[c].elm).before(a.placeHolderItem):b(e.pos[c].elm).after(a.placeHolderItem);d.each(function(){var a=i().eq(this.idx).get(0);this!=a&&i().index(this)<this.idx?b(this).insertAfter(a):this!=a&&b(this).insertBefore(a)});b(h).each(function(a,b){b.createDropTargets(); b.buildPositionTable()});l=a.draggedItem.offset();return!1},findPos:function(a,b){for(var e=0;e<this.pos.length;e++)if(this.pos[e].left<a&&this.pos[e].right>a&&this.pos[e].top<b&&this.pos[e].bottom>b)return e;return-1},createDropTargets:function(){f.dragBetween&&b(h).each(function(){var d=b(this.container).find("[data-placeholder]"),c=b(this.container).find("[data-droptarget]");0<d.size()&&0<c.size()?c.remove():0==d.size()&&0==c.size()&&("td"==f.itemSelector?b(f.placeHolderTemplate).attr("data-droptarget", !0).appendTo(this.container):b(this.container).append(a.placeHolderItem.removeAttr("data-placeholder").clone().attr("data-droptarget",!0)),a.placeHolderItem.attr("data-placeholder",!0))})}};m.init();h.push(m)});return this}};b.fn.dragsort.defaults={itemSelector:"",dragSelector:"",dragSelectorExclude:"input, textarea",dragEnd:function(){},dragBetween:!1,placeHolderTemplate:"",scrollContainer:window,scrollSpeed:5}})(jQuery);

/*global jQuery, document*/
jQuery(document).ready(function($) {
	jQuery("ul.text_sortable").dragsort({
		dragSelector: ".drag",
		dragBetween: true,
		dragEnd: triggerSaveNotice
	});

	function triggerSaveNotice() {
		jQuery('#redux-opts-save-warn').slideDown('slow');
	};
});
;/* global redux_change */
/**
 * Typography
 * Dependencies		: google.com, jquery
 * Feature added by : Dovy Paukstys - http://simplerain.com/
 * Date				: 06.14.2013
 */
jQuery.noConflict();
/** Fire up jQuery - let's dance!
 */
jQuery(document).ready(function($) {
	var api = wp.customize;

	Object.size = function(obj) {
		var size = 0,
			key;
		for (key in obj) {
			if (obj.hasOwnProperty(key)) {
				size++;
			}
		}
		return size;
	};

	function set_customizer_value(customizer_id, key, value) {

		if ( typeof window._wpCustomizeSettings === 'undefined' ) {
			return;
		}

		if ( window._wpCustomizeSettings.settings[customizer_id] === 'undefined' || window._wpCustomizeSettings.settings[customizer_id].value === 'undefined') {
			return;
		}

		window._wpCustomizeSettings.settings[customizer_id].value[key] = value;

	}

	function typographySelect(selector) {
		var mainID = jQuery(selector).parents('.redux-typography-container').attr('data-id');

		// customizer things
		var customizer_id = $('#' + mainID + ' .redux-typography-font-family').attr('name');
		customizer_id = customizer_id.replace('[font-family]', '');


		if ($(selector).hasClass('redux-typography-family')) {
			//$('#' + mainID + ' .typography-style span').text('');
			//$('#' + mainID + ' .typography-script span').text('');
		}
		// Set all the variables to be checked against
		var family = $('#' + mainID + ' select.redux-typography-family').val();
		if (!family) {
			family = null; //"inherit";
		}
		var familyBackup = $('#' + mainID + ' select.redux-typography-family-backup').val();
		var size = $('#' + mainID + ' .redux-typography-size').val();
		var height = $('#' + mainID + ' .redux-typography-height').val();
		var word = $('#' + mainID + ' .redux-typography-word').val(); // New Word-Spacing
		var letter = $('#' + mainID + ' .redux-typography-letter').val(); // New Letter-Spacing
		var align = $('#' + mainID + ' select.redux-typography-align').val(); // text-align
		var transform = $('#' + mainID + ' select.redux-typography-transform').val();
		var style = $('#' + mainID + ' select.redux-typography-style').val();
		var script = $('#' + mainID + ' select.redux-typography-subsets').val();
		var color = $('#' + mainID + ' .redux-typography-color').val();
		var units = $('#' + mainID).data('units');
		var option = $('#' + mainID + ' .redux-typography-family option:selected');
		var output = family;
		//$('#' + mainID + ' select.redux-typography-style').val('');
		//$('#' + mainID + ' select.redux-typography-subsets').val('');
		var google = option.data('google'); // Check if font is a google font
		// Page load. Speeds things up memory wise to offload to client
		if (!$('#' + mainID).hasClass('typography-initialized')) {
			style = $('#' + mainID + ' select.redux-typography-style').data('value');
			script = $('#' + mainID + ' select.redux-typography-subsets').data('value');
			if (style !== "") {
				style = String(style);
			}
			if (typeof (script) !== undefined) {
				script = String(script);
			}
			$('#' + mainID).addClass('typography-initialized');
		}

		// Get the styles and such from the font
		var details = "";
		if (option.data('details')) {
			details = jQuery.parseJSON(decodeURIComponent(option.data('details')));
			$('#' + mainID + ' .redux-typography-font-options').val(decodeURIComponent(option.data('details')));
		}

		// If we changed the font
		if ($(selector).hasClass('redux-typography-family')) {
			var html = '<option value=""></option>';
			if (google) { // Google specific stuff
				var selected = "";
				$.each(details.variants, function(index, variant) {
					if (variant.id === style || Object.size(details.variants) === 1) {
						selected = ' selected="selected"';
						style = variant.id;
					} else {
						selected = "";
					}
					html += '<option value="' + variant.id + '"' + selected + '>' + variant.name.replace(/\+/g, " ") + '</option>';
				});
				$('#' + mainID + ' .redux-typography-style').html(html);
				selected = "";
				html = '<option value=""></option>';
				$.each(details.subsets, function(index, subset) {
					if (subset.id === script || Object.size(details.subsets) === 1) {
						selected = ' selected="selected"';
						script = subset.id;
					} else {
						selected = "";
					}
					html += '<option value="' + subset.id + '"' + selected + '>' + subset.name.replace(/\+/g, " ") + '</option>';
				});
				if (typeof (familyBackup) !== "undefined" && familyBackup !== "") {
					output += ', ' + familyBackup;
				}

				$('#' + mainID + ' .redux-typography-subsets').html(html);
				$('#' + mainID + ' .redux-typography-subsets').fadeIn('fast');
				$('#' + mainID + ' .typography-family-backup').fadeIn('fast');
			} else {
				if (details) {
					$.each(details, function(index, value) {
						if (index === style || index === "normal") {
							selected = ' selected="selected"';
							$('#' + mainID + ' .typography-style .select2-chosen').text(value);
						} else {
							selected = "";
						}
						html += '<option value="' + index + '"' + selected + '>' + value.replace('+', ' ') + '</option>';
					});
					$('#' + mainID + ' .redux-typography-style').html(html);
					$('#' + mainID + ' .redux-typography-subsets').fadeOut('fast');
					$('#' + mainID + ' .typography-family-backup').fadeOut('fast');
				}
			}
		} else if ($(selector).hasClass('redux-typography-family-backup') && familyBackup !== "") {
			$('#' + mainID + ' .redux-typography-font-family').val(output);

		}
		set_customizer_value( customizer_id, 'font-family', output );
		// Check if the selected value exists. If not, empty it. Else, apply it.
		if ($('#' + mainID + " select.redux-typography-style option[value='" + style + "']").length === 0) {
			style = "";
			$('#' + mainID + ' select.redux-typography-style').val('');
		} else if (style === "400") {
			$('#' + mainID + ' select.redux-typography-style').val(style);
		}
		if ($('#' + mainID + " select.redux-typography-subsets option[value='" + script + "']").length === 0) {
			script = "";
			$('#' + mainID + ' select.redux-typography-subsets').val('');
		}

		var _linkclass = 'style_link_' + mainID;

		//remove other elements crested in <head>
		$('.' + _linkclass).remove();
		if (family !== null && family !== "inherit") {
			//replace spaces with "+" sign
			var the_font = family.replace(/\s+/g, '+');
			if (google) {
				//add reference to google font family
				var link = the_font;
				if (style) {
					link += ':' + style.replace(/\-/g, " ");
				}
				if (script) {
					link += '&subset=' + script;
				}

				if (WebFont) {
					WebFont.load({google: {families: [link]}});
				}
				//link = 'http://fonts.googleapis.com/css?family=' + link;
				//$('head').append('<link href="' + link + '" rel="stylesheet" type="text/css" class="' + _linkclass + '">');
				$('#' + mainID + ' .redux-typography-google').val(true);
			} else {
				$('#' + mainID + ' .redux-typography-google').val(false);
			}
		}

		$('#' + mainID + ' .typography-preview').css('font-size', size + units);
		$('#' + mainID + ' .typography-preview').css('font-style', "normal");

		// Weight and italic
		if (style.indexOf("italic") !== -1) {
			$('#' + mainID + ' .typography-preview').css('font-style', 'italic');
			$('#' + mainID + ' .typography-font-style').val('italic');
			style = style.replace('italic', '');
			set_customizer_value( customizer_id, 'font-style', 'italic' );
		} else {
			$('#' + mainID + ' .typography-font-style').val('');
			set_customizer_value( customizer_id, 'font-style', '' );
		}
		$('#' + mainID + ' .typography-font-weight').val(style);
		$('#' + mainID + ' .typography-preview').css('font-weight', style);

		//show in the preview box the font
		$('#' + mainID + ' .typography-preview').css('font-family', family + ', sans-serif');

		if (family === 'none' && family === '') {
			//if selected is not a font remove style "font-family" at preview box
			$('#' + mainID + ' .typography-preview').css('font-family', 'inherit');
		}
		if (!height) {
			height = size;
		}

		$('#' + mainID + ' .typography-preview').css('line-height', height + units);
		$('#' + mainID + ' .typography-preview').css('word-spacing', word + units);
		$('#' + mainID + ' .typography-preview').css('letter-spacing', letter + units);
		if (size === '') {
			$('#' + mainID + ' .typography-font-size').val('');
		} else {
			//console.log('here-font-size');
			$('#' + mainID + ' .typography-font-size').val(size + units);
		}
		if (height === '') {
			$('#' + mainID + ' .typography-line-height').val('');
		} else {
			$('#' + mainID + ' .typography-line-height').val(height + units);
		}
		$('#' + mainID + ' .typography-word-spacing').val(word + units);
		$('#' + mainID + ' .typography-letter-spacing').val(letter + units);

		if (color) {
			$('#' + mainID + ' .typography-preview').css('color', color);
			$('#' + mainID + ' .typography-preview').css('background-color', getContrastColour(color));
		}

		$('#' + mainID + ' .redux-typography-font-family').val(output);
		$('#' + mainID + ' .typography-style .select2-chosen').text($('#' + mainID + ' .redux-typography-style option:selected').text());
		$('#' + mainID + ' .typography-script .select2-chosen').text($('#' + mainID + ' .redux-typography-subsets option:selected').text());

		if (align) {
			$('#' + mainID + ' .typography-preview').css('text-align', align);
		}

		if (transform) {
			$('#' + mainID + ' .typography-preview').css('text-transform', transform);
		}

		set_customizer_value( customizer_id, 'font-options', decodeURIComponent(option.data('details')) );
		set_customizer_value( customizer_id, 'font-weight', style );
		set_customizer_value( customizer_id, 'google', google );
		set_customizer_value( customizer_id, 'subsets', script );
		set_customizer_value( customizer_id, 'text-align', align );

		if ( typeof api !== "undefined") {
			api.instance(customizer_id).previewer.refresh();
		}

	}
	//init for each element
	jQuery('.redux-typography-container').each(function() {
		var family = jQuery(this).find('.redux-typography-family');
		if (family.data('value') !== "") {
			jQuery(family).val(family.data('value'));
		}
		typographySelect(family);
	});
	//init when value is changed
	jQuery('.redux-typography').on('change', function() {
		typographySelect(this);
		if ( typeof api !== "undefined")
			api.trigger('change');
	});
	//init when value is changed
	jQuery('.redux-typography-size, .redux-typography-height, .redux-typography-word, .redux-typography-letter, .redux-typography-align, .redux-typography-transform').keyup(function() {
		typographySelect(this);
	});
	// Have to redeclare the wpColorPicker to get a callback function
	$('.redux-typography-color').wpColorPicker({
		change: function(event, ui) {
			redux_change(jQuery(this));
			jQuery(this).val(ui.color.toString());
			typographySelect(jQuery(this));
		}
	});

	jQuery(".redux-typography-size").numeric({
		allowMinus: false
	});

	jQuery(".redux-typography-height, .redux-typography-word, .redux-typography-letter").numeric({
		allowMinus: true
	});
	//jQuery(".redux-typography-family, .redux-typography-style, .redux-typography-subsets").select2({
	jQuery(".redux-typography-family, .redux-typography-family-backup, .redux-typography-align, .redux-typography-transform").select2({
		width: 'resolve',
		triggerChange: true,
		allowClear: true
	});

	jQuery('.redux-typography-qtip').each(function() {
		$(this).qtip({
//            text: function(event, api) {
//                return $(this).attr('qtip-content');
//            },
			//text: 'Me',
			style: 'qtip-tipsy black',
			position: {
				my: 'bottom center', // Position my top left...
				at: 'top center' // at the bottom right of...
			}

		});
	});
});
;/*global jQuery, document, redux_opts, ajaxurl */
(function($) {
	'use strict';
	$.redux = $.redux || {};
	$(document).ready(function() {
		$.redux.edd();
	});
	$.redux.edd = function() {
		jQuery('.redux-edd-input').change(function() {
			jQuery(this).parent().find('.redux-edd-status').val('');
		});
		jQuery(document).on("click", ".redux-EDDAction", function(e) {
			e.preventDefault();
			var parent = jQuery(this).parents('.redux-container-edd_license:first');
			var id = jQuery(this).attr('data-id');
			var theData = {};
			parent.find('.redux-edd').each(function() {
				theData[jQuery(this).attr('id').replace(id + '-', '')] = jQuery(this).val();
			});
			jQuery('#' + id + '-notice').attr('class', "redux-info-field redux-info");
			jQuery('#' + id + '-status_notice').html(jQuery('#' + id + '-notice').data('verify'));
			jQuery('#' + id + '-status_notice').attr('background-image');

			theData.edd_action = jQuery(this).attr('data-edd_action');
			theData.opt_name = redux_opts.opt_name;
			jQuery.post(
				ajaxurl, {
					'action': 'redux_edd_' + redux_opts.opt_name + '_license',
					'data': theData
				}, function(response) {
					response = jQuery.parseJSON(response);
					jQuery('#' + id + '-status').val(response.status);
					jQuery('#' + id + '-status_notice').html(response.status);
					if (response.response === "valid") {
						//jQuery('#'+id+'-notice').switchClass( "big", "blue", 1000, "easeInOutQuad" );
						jQuery('#' + id + '-notice').attr('class', "redux-info-field redux-success");
						jQuery('#' + id + '-activate').fadeOut('medium', function() {
							jQuery('#' + id + '-deactivate').fadeIn().css("display", "inline-block");
						});
					} else if (response.response === "deactivated") {
						jQuery('#' + id + '-notice').attr('class', "redux-info-field redux-warning");
						jQuery('#' + id + '-deactivate').fadeOut('medium', function() {
							jQuery('#' + id + '-activate').fadeIn().css("display", "inline-block");
						});
					} else { // Inactive or bad
						jQuery('#' + id + '-deactivate').fadeOut('medium', function() {
							jQuery('#' + id + '-notice').attr('class', "redux-info-field redux-critical");
							jQuery('#' + id + '-activate').fadeIn().css("display", "inline-block");
						});
					}
				});
		});
	};
})(jQuery);;/*global jQuery, document, redux.args, confirm, relid:true, console, jsonView */
(function($) {
	'use strict';
	$.redux = $.redux || {};


	$(document).ready(function() {
		// Intense debug  ;)
		//jQuery('input[type="hidden"]').attr("type","text");
		//console.log(redux);

		jQuery.fn.isOnScreen = function() {
			if (!window) {
				return;
			}
			var win = jQuery(window);
			var viewport = {
				top: win.scrollTop(),
				left: win.scrollLeft()
			};
			viewport.right = viewport.left + win.width();
			viewport.bottom = viewport.top + win.height();
			var bounds = this.offset();
			bounds.right = bounds.left + this.outerWidth();
			bounds.bottom = bounds.top + this.outerHeight();
			return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));
		};


		$.redux.required();

		$("body").on('change', '.redux-main select, .redux-main radio, .redux-main input[type=checkbox], .redux-main input[type=hidden]', function(e) {
			$.redux.check_dependencies(this);

		});

		$("body").on('check_dependencies', function(e, variable) {
			if ( typeof variable === "undefined") return;
			$.redux.check_dependencies(variable);
		});

		//console.log(redux.fieldsHidden);
		// Hide the hidden fields on load
		for (var i = 0; i < redux.fieldsHidden.length; i++) {
			$.redux.check_dependencies(jQuery('#' + redux.fieldsHidden[i]));
		}

		$('td > fieldset:empty,td > div:empty').parent().parent().hide();

	});

	$.redux.required = function() {

		// Hide the fold elements on load ,
		// It's better to do this by PHP but there is no filter in tr tag , so is not possible
		// we going to move each attributes we may need for folding to tr tag
		$('.hiddenFold, .showFold').each(function() {
			var current = $(this),
				scope = current.parents('tr:eq(0)'),
				check_data = current.data();

			if (current.hasClass('hiddenFold')) {
				scope.addClass('hiddenFold').attr('data-check-field', check_data.checkField)
					.attr('data-check-comparison', check_data.checkComparison)
					.attr('data-check-value', check_data.checkValue)
					.attr('data-check-id', check_data.id).hide();
				//we clean here, so we won't get confuse
				current.removeClass('hiddenFold').removeAttr('data-check-field')
					.removeAttr('data-check-comparison')
					.removeAttr('data-check-value');
			} else {
				scope.attr('data-check-field', check_data.checkField)
					.attr('data-check-comparison', check_data.checkComparison)
					.attr('data-check-value', check_data.checkValue)
					.attr('data-check-id', check_data.id);
				//we clean here, so we won't get confuse
				current.removeClass('showFold').removeAttr('data-check-field')
					.removeAttr('data-check-comparison')
					.removeAttr('data-check-value');
			}
		});

		$(".fold").promise().done(function() {
			// Hide the fold elements on load
			$('.foldParent').each(function() {
				// in case of a radio input, take in consideration only the checked value
				if ($(this).attr('type') == 'radio' && $(this).attr('checked') != 'checked') {
					return;
				}
				var id = $(this).parents('.redux-field:first').data('id');
				if (redux.folds[ id ]) {
					if (!redux.folds[ id ].parent) {
						$.redux.verify_fold($(this));
					}
				}
			});
		});
	};

	$.redux.check_dependencies = function(variable) {

		var current = $(variable),
			scope = current.parents('.redux-group-tab:eq(0)');

		if (!scope.length)
			scope = $('body');

		// Fix for Checkbox + Required issue
		if ($(variable).prop('type') == "checkbox") {
			$(variable).is(":checked") ? $(variable).val('1') : $(variable).val('0');
		}

		var id = current.parents('.redux-field:first').data('id'),
			dependent = scope.find('tr[data-check-field="' + id + '"]'),
			value1 = variable.value,
			is_hidden = current.parents('tr:eq(0)').is('.hiddenFold');

		if (!dependent.length)
			return;

		dependent.each(function() {
			var current = $(this),
				check_data = current.data(),
				value2 = check_data.checkValue,
				show = false,
				infoFieldID = '',
				sectionFieldID = '',
				divideFieldID = '',
				value2_array;

			var testInfoField = current.find('.redux-field:first');
			if (testInfoField.hasClass('redux-container-info')) {
				infoFieldID = current.find('.redux-container-info').data('id');
			}

			// Eat it, Travis!
			var testSectionField = current.find('.redux-field:first');
			if (testSectionField.hasClass('redux-container-section')) {
				sectionFieldID = current.find('.redux-container-section').data('id');
			}

			// Divide field
			var testDivideField = current.find('.redux-field:first');
			if (testDivideField.hasClass('redux-container-divide')) {
				divideFieldID = current.find('.redux-container-divide').data('id');
			}

			if (!is_hidden) {
				switch (check_data.checkComparison) {
					case '=':
					case 'equals':
						//if value was array
						if (value2.toString().indexOf('|') !== -1) {
							value2_array = value2.split('|');
							if ($.inArray(value1, value2_array) != -1) {
								show = true;
							}
						} else {
							if (value1 == value2) {
								show = true;
							}
						}
						break;
					case '!=':
					case 'not':
						//if value was array
						if (value2.toString().indexOf('|') !== -1) {
							value2_array = value2.split('|');
							if ($.inArray(value1, value2_array) == -1) {
								show = true;
							}
						} else {
							if (value1 != value2) {
								show = true;
							}
						}
						break;
					case '>':
					case 'greater':
					case 'is_larger':
						if (parseFloat(value1) > parseFloat(value2))
							show = true;
						break;
					case '>=':
						if (parseFloat(value1) >= parseFloat(value2))
							show = true;
						break;
					case '<':
					case 'less':
					case 'is_smaller':
						if (parseFloat(value1) < parseFloat(value2))
							show = true;
						break;
					case '<=':
						if (parseFloat(value1) <= parseFloat(value2))
							show = true;
						break;
					case 'contains':
						if (value1.toString().indexOf(value2) != -1)
							show = true;
						break;
					case 'doesnt_contain':
					case 'not_contain':
						if (value1.toString().indexOf(value2) == -1)
							show = true;
						break;
					case 'is_empty_or':
						if (value1 === "" || value1 == value2)
							show = true;
						break;
					case 'not_empty_and':
						if (value1 !== "" && value1 != value2)
							show = true;
						break;
				}
			}

			if (show === true && current.is('.hiddenFold')) {
				if (infoFieldID !== "") {
					$('#info-' + infoFieldID).css({display: 'none'}).fadeIn(300).show();
				}

				if (sectionFieldID !== "") {
					$('#section-' + sectionFieldID).css({display: 'none'}).fadeIn(300).show();
				}

				if (divideFieldID !== "") {
					$('#' + divideFieldID + '-divide').css({display: 'none'}).fadeIn(300).show();
				}

				current.css({
					display: 'none'
				}).removeClass('hiddenFold').find('select, radio, input[type=checkbox]').trigger('change');
				current.fadeIn(300);
			} else if (show === false && !current.is('.hiddenFold')) {
				if (infoFieldID !== "") {
					$('#info-' + infoFieldID).css({display: ''}).fadeOut(300).hide();
				}

				if (sectionFieldID !== "") {
					$('#section-' + sectionFieldID).css({display: ''}).fadeOut(300).hide();
				}

				if (divideFieldID !== "") {
					$('#' + divideFieldID + '-divide' ).css({display: ''}).fadeOut(300).hide();
				}

				current.css({
					display: ''
				}).addClass('hiddenFold').find('select, radio, input[type=checkbox]').trigger('change');
				current.fadeOut(300);
			}

			//force rehid of empty elements
			$('td > fieldset:empty,td > div:empty').parent().parent().hide();

			//$.redux.verify_fold($(variable));
		});
	};

	$.redux.verify_fold = function(item) {
		var id = item.parents('.redux-field:first').data('id');
		var itemVal = item.val();
		var scope = (item.parents('.redux-groups-accordion-group:first').length > 0) ? item.parents('.redux-groups-accordion-group:first') : item.parents('.redux-group-tab:eq(0)');

		if (redux.folds[ id ]) {

			if (redux.folds[ id ].children) {

				var theChildren = {};
				$.each(redux.folds[ id ].children, function(index, value) {
					$.each(value, function(index2, value2) { // Each of the children for this value
						if (!theChildren[value2]) { // Create an object if it's not there
							theChildren[value2] = {show: false, hidden: false};
						}

						if (index == itemVal || theChildren[value2] === true) { // Check to see if it's in the criteria
							theChildren[value2].show = true;
						}

						if (theChildren[value2].show === true && scope.find('tr[data-check-id="' + id + '"]').hasClass("hiddenFold")) {
							theChildren[value2].show = false; // If this item is hidden, hide this child
						}

						if (theChildren[value2].show === true && scope.find('tr[data-check-id="' + redux.folds[ id ].parent + '"]').hasClass('hiddenFold')) {
							theChildren[value2].show = false; // If the parent of the item is hidden, hide this child
						}
						// Current visibility of this child node
						theChildren[value2].hidden = scope.find('tr[data-check-id="' + value2 + '"]').hasClass("hiddenFold");
					});
				});

				$.each(theChildren, function(index) {

					var parent = scope.find('tr[data-check-id="' + index + '"]');


					if (theChildren[index].show === true) {

						parent.fadeIn('medium', function() {
							parent.removeClass('hiddenFold');
							if (redux.folds[ index ] && redux.folds[ index ].children) {
								// Now iterate the children
								$.redux.verify_fold(parent.find('select, radio, input[type=checkbox], input[type=hidden]'));
							}
						});

					} else if (theChildren[index].hidden === false) {

						parent.fadeOut('medium', function() {
							parent.addClass('hiddenFold');
							if (redux.folds[ index ].children) {
								// Now iterate the children
								$.redux.verify_fold(parent.find('select, radio, input[type=checkbox], input[type=hidden]'));
							}
						});
					}
				});
			}
		}
	};
})(jQuery);

jQuery.noConflict();

var confirmOnPageExit = function(e) {
	//return; // ONLY FOR DEBUGGING
	// If we haven't been passed the event get the window.event
	e = e || window.event;
	var message = redux.args.save_pending;
	// For IE6-8 and Firefox prior to version 4
	if (e) {
		e.returnValue = message;
	}
	window.onbeforeunload = null;
	// For Chrome, Safari, IE8+ and Opera 12+
	return message;
};

function verifyPos(s, b) {

	// trim off spaces
	s = s.replace(/^\s+|\s+$/gm,'');

	// position value is blank, set the default
	if (s === '' || s.search(' ') == -1) {
		if (b === true) {
			return 'top left';
		} else {
			return 'bottom right';
		}
	}

	// split string into array
	var split = s.split(' ');

	// Evaluate first string.  Must be top, center, or bottom
	var paramOne = b ? 'top': 'bottom';
	if (split[0] == 'top' || split[0] == 'center' || split[0] == 'bottom') {
		paramOne = split[0];
	}

	// Evaluate second string.  Must be left, center, or right.
	var paramTwo = b ? 'left' : 'right';
	if (split[1] == 'left' || split[1] == 'center' || split[1] == 'right') {
		paramTwo = split[1];
	}

	return paramOne + ' ' + paramTwo;
}

function getContrastColour(hexcolour) {
	// default value is black.
	retVal = '#444444';

	// In case - for some reason - a blank value is passed.
	// This should *not* happen.  If a function passing a value
	// is canceled, it should pass the current value instead of
	// a blank.  This is how the Windows Common Controls do it.  :P
	if (hexcolour !== '') {

		// Replace the hash with a blank.
		hexcolour = hexcolour.replace('#', '');

		var r = parseInt(hexcolour.substr(0, 2), 16);
		var g = parseInt(hexcolour.substr(2, 2), 16);
		var b = parseInt(hexcolour.substr(4, 2), 16);
		var res = ((r * 299) + (g * 587) + (b * 114)) / 1000;

		// Instead of pure black, I opted to use WP 3.8 black, so it looks uniform.  :) - kp
		retVal = (res >= 128) ? '#444444' : '#ffffff';
	}

	return retVal;
}

function verify_fold(item) {

	jQuery(document).ready(function($) {
		//console.log(verify_fold);



		if (item.hasClass('redux-info') || item.hasClass('redux-typography')) {
			return;
		}

		var id = item.parents('.redux-field:first').data('id');
		//console.log(id);
		var itemVal = item.val();

		if (redux.folds[ id ]) {

			/*
			 if ( redux.folds[ id ].parent && jQuery( '#' + redux.folds[ id ].parent ).is('hidden') ) {
			 console.log('Going to parent: '+redux.folds[ id ].parent+' for field: '+id);
			 //verify_fold( jQuery( '#' + redux.folds[ id ].parent ) );
			 }
			 */
			if (redux.folds[ id ].children) {
				//console.log('Children for: '+id);

				var theChildren = {};
				$.each(redux.folds[ id ].children, function(index, value) {
					$.each(value, function(index2, value2) { // Each of the children for this value
						if (!theChildren[value2]) { // Create an object if it's not there
							theChildren[value2] = {show: false, hidden: false};
						}
						//console.log('id: '+id+' childID: '+value2+' parent value: '+index+' itemVal: '+itemVal);
						if (index == itemVal || theChildren[value2] === true) { // Check to see if it's in the criteria
							theChildren[value2].show = true;
							//console.log('theChildren['+value2+'].show = true');
						}

						if (theChildren[value2].show === true && jQuery('#' + id).parents("tr:first").hasClass("hiddenFold")) {
							theChildren[value2].show = false; // If this item is hidden, hide this child
							//console.log('set '+value2+' false');
						}

						if (theChildren[value2].show === true && jQuery('#' + redux.folds[ id ].parent).hasClass('hiddenFold')) {
							theChildren[value2].show = false; // If the parent of the item is hidden, hide this child
							//console.log('set '+value2+' false2');
						}
						// Current visibility of this child node
						theChildren[value2].hidden = jQuery('#' + value2).parents("tr:first").hasClass("hiddenFold");
					});
				});

				//console.log(theChildren);

				$.each(theChildren, function(index) {

					var parent = jQuery('#' + index).parents("tr:first");

					if (theChildren[index].show === true) {
						//console.log('FadeIn '+index);

						parent.fadeIn('medium', function() {
							parent.removeClass('hiddenFold');
							if (redux.folds[ index ] && redux.folds[ index ].children) {
								//verify_fold(jQuery('#'+index)); // Now iterate the children
							}
						});

					} else if (theChildren[index].hidden === false) {
						//console.log('FadeOut '+index);

						parent.fadeOut('medium', function() {
							parent.addClass('hiddenFold');
							if (redux.folds[ index ].children) {
								//verify_fold(jQuery('#'+index)); // Now iterate the children
							}
						});
					}
				});
			}
		}

	});
}

function redux_change(variable) {
	//We need this for switch and image select fields , jquery dosn't catch it on fly
	//if(variable.is('input[type=hidden]') || variable.hasClass('spinner-input') || variable.hasClass('slider-input') || variable.hasClass('upload') || jQuery(variable).parents('fieldset:eq(0)').is('.redux-container-image_select') ) {

	jQuery('body').trigger('check_dependencies', variable);
	//}

	if (variable.hasClass('compiler')) {
		jQuery('#redux-compiler-hook').val(1);
		//console.log('Compiler init');
	}


	if (variable.hasClass('foldParent')) {
		//verify_fold(variable);
	}
	window.onbeforeunload = confirmOnPageExit;
	if (jQuery(variable).parents('fieldset.redux-field:first').hasClass('redux-field-error')) {
		jQuery(variable).parents('fieldset.redux-field:first').removeClass('redux-field-error');
		jQuery(variable).parent().find('.redux-th-error').slideUp();
		var parentID = jQuery(variable).closest('.redux-group-tab').attr('id');
		var hideError = true;
		jQuery('#' + parentID + ' .redux-field-error').each(function() {
			hideError = false;
		});
		if (hideError) {
			jQuery('#' + parentID + '_li .redux-menu-error').hide();
			jQuery('#' + parentID + '_li .redux-group-tab-link-a').removeClass('hasError');
		}
	}
	jQuery('#redux-save-warn').slideDown();
}
jQuery(document).ready(function($) {
	jQuery('.redux-action_bar, .redux-presets-bar').on('click', function() {
		window.onbeforeunload = null;
	});

	if (jQuery().qtip){
		// Shadow
		var shadow = '';
		var tip_shadow = redux.args.hints.tip_style.shadow;
		if (tip_shadow === true) {
			shadow = 'qtip-shadow';
		}

		// Color
		var color = '';
		var tip_color = redux.args.hints.tip_style.color;
		if (tip_color !== '') {
			color = 'qtip-' + tip_color;
		}

		// Rounded
		var rounded = '';
		var tip_rounded = redux.args.hints.tip_style.rounded;
		if (tip_rounded === true) {
			rounded = 'qtip-rounded';
		}

		// Tip style
		var style = '';
		var tip_style = redux.args.hints.tip_style.style;
		if (tip_style !== '') {
			style = 'qtip-' + tip_style;
		}

		var classes = shadow + ',' + color + ',' + rounded + ',' + style;
		classes = classes.replace(/,/g, ' ');

		// Get position data
		var myPos = redux.args.hints.tip_position.my;
		var atPos = redux.args.hints.tip_position.at;

		// Gotta be lowercase, and in proper format
		myPos = verifyPos(myPos.toLowerCase(), true);
		atPos = verifyPos(atPos.toLowerCase(), false);

		// Tooltip trigger action
		var showEvent = redux.args.hints.tip_effect.show.event;
		var hideEvent = redux.args.hints.tip_effect.hide.event;

		// Tip show effect
		var tipShowEffect   = redux.args.hints.tip_effect.show.effect;
		var tipShowDuration = redux.args.hints.tip_effect.show.duration;

		// Tip hide effect
		var tipHideEffect   = redux.args.hints.tip_effect.hide.effect;
		var tipHideDuration = redux.args.hints.tip_effect.hide.duration;

		$('div.redux-qtip').each(function() {
			$(this).qtip({

				content: {
					text: $(this).attr('qtip-content'),
					title: $(this).attr('qtip-title')
				},

				show: {
					effect: function () {
						switch (tipShowEffect) {
							case 'slide':
								$(this).slideDown(tipShowDuration);
								break;
							case 'fade':
								$(this).fadeIn(tipShowDuration);
								break;
							default:
								$(this).show();
								break;
						}
					},
					event: showEvent
				},

				hide: {
					effect: function() {
						switch (tipHideEffect) {
							case 'slide':
								$(this).slideUp(tipHideDuration);
								break;
							case 'fade':
								$(this).fadeOut(tipHideDuration);
								break;
							default:
								$(this).show(tipHideDuration);
								break;
						}
					},
					event: hideEvent
				},

				style: {
					classes: classes
				},

				position: {
					my: myPos,
					at: atPos
				}
			});
		});
		// });

		$('input[qtip-content]').each(function() {
			$(this).qtip({
				content: {
					text: $(this).attr('qtip-content'),
					title: $(this).attr('qtip-title')
				},
				show: 'focus',
				hide: 'blur',
				style: classes,
				position: {
					my: myPos,
					at: atPos

				}
			});
		});
	}

	$('#toplevel_page_' + redux.args.slug + ' .wp-submenu a, #wp-admin-bar-' + redux.args.slug + ' a.ab-item').click(function(e) {
		if ($('#toplevel_page_' + redux.args.slug).hasClass('wp-menu-open') || $(this).hasClass('ab-item')) {
			e.preventDefault();
			var url = $(this).attr('href').split('&tab=');
			$('#' + url[1] + '_section_group_li_a').click();
			return false;
		}
	});

	/**
	 Current tab checks, based on cookies
	 **/
	jQuery('.redux-group-tab-link-a').click(function() {
		relid = jQuery(this).data('rel'); // The group ID of interest
		jQuery('#currentSection').val(relid);
		// Set the proper page cookie
		$.cookie('redux_current_tab', relid, {
			expires: 7,
			path: '/'
		});

		$('#toplevel_page_' + redux.args.slug + ' .wp-submenu a.current').removeClass('current');
		$('#toplevel_page_' + redux.args.slug + ' .wp-submenu li.current').removeClass('current');

		$('#toplevel_page_' + redux.args.slug + ' .wp-submenu a').each(function() {
			var url = $(this).attr('href').split('&tab=');
			if (url[1] == relid) {
				$(this).addClass('current');
				$(this).parent().addClass('current');
			}
		});

		// Remove the old active tab
		var oldid = jQuery('.redux-group-tab-link-li.active .redux-group-tab-link-a').data('rel');
		jQuery('#' + oldid + '_section_group_li').removeClass('active');
		// Show the group
		jQuery('#' + oldid + '_section_group').hide();
		jQuery('#' + relid + '_section_group').fadeIn(200, function() {
			if (jQuery('#redux-footer').length !== 0) {
				stickyInfo(); // race condition fix
			}
		});
		jQuery('#' + relid + '_section_group_li').addClass('active');
	});
	// Get the URL parameter for tab

	function getURLParameter(name) {
		return decodeURI((new RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ''])[1]);
	}
	// If the $_GET param of tab is set, use that for the tab that should be open
	var tab = getURLParameter('tab');
	if (tab !== "") {
		if ($.cookie("redux_current_tab_get") !== tab) {
			$.cookie('redux_current_tab', tab, {
				expires: 7,
				path: '/'
			});
			$.cookie('redux_current_tab_get', tab, {
				expires: 7,
				path: '/'
			});
			jQuery('#' + tab + '_section_group_li').click();
		}
	} else if ($.cookie('redux_current_tab_get') !== "") {
		$.removeCookie('redux_current_tab_get');
	}
	var sTab = jQuery('#' + $.cookie("redux_current_tab") + '_section_group_li_a');
	// Tab the first item or the saved one
	if ($.cookie("redux_current_tab") === null || typeof ($.cookie("redux_current_tab")) === "undefined" || sTab.length === 0) {
		jQuery('.redux-group-tab-link-a:first').click();
	} else {
		sTab.click();
	}
	// Default button clicked
	jQuery('input[name="' + redux.args.opt_name + '[defaults]"]').click(function() {
		if (!confirm(redux.args.reset_confirm)) {
			return false;
		}
		window.onbeforeunload = null;
	});
	// Default button clicked
	jQuery('input[name="' + redux.args.opt_name + '[defaults-section]"]').click(function() {
		if (!confirm(redux.args.reset_section_confirm)) {
			return false;
		}
		window.onbeforeunload = null;
	});

	function redux_expand_options(parent) {
		//console.log('here');
		var trigger = parent.find('.expand_options');
		var width = parent.find('.redux-sidebar').width();
		var id = jQuery('.redux-group-menu .active a').data('rel') + '_section_group';
		if (trigger.hasClass('expanded')) {
			trigger.removeClass('expanded');
			parent.find('.redux-main').removeClass('expand');
			parent.find('.redux-sidebar').stop().animate({
				'margin-left': '0px'
			}, 500);
			parent.find('.redux-main').stop().animate({
				'margin-left': width
			}, 500);
			parent.find('.redux-group-tab').each(function() {
				if (jQuery(this).attr('id') !== id) {
					jQuery(this).fadeOut('fast');
				}
			});
			// Show the only active one
		} else {
			trigger.addClass('expanded');
			parent.find('.redux-main').addClass('expand');
			parent.find('.redux-sidebar').stop().animate({
				'margin-left': -width - 102
			}, 500);
			parent.find('.redux-main').stop().animate({
				'margin-left': '0px'
			}, 500);
			parent.find('.redux-group-tab').fadeIn();
		}
		return false;
	}

	jQuery('.expand_options').click(function(e) {
		e.preventDefault();

		redux_expand_options(jQuery(this).parents('.redux-container:first'));
		return false;
	});

	if (jQuery('#redux-save').is(':visible')) {
		jQuery('#redux-save').slideDown();
	}
	if (jQuery('#redux-imported').is(':visible')) {
		jQuery('#redux-imported').slideDown();
	}
	jQuery(document.body).on('change', '.redux-field input, .redux-field textarea, .redux-field select', function() {
		if (!jQuery(this).hasClass('noUpdate')) {
			redux_change(jQuery(this));
		}
	});

	/**
	 BEGIN Sticky footer bar
	 **/
	var stickyHeight = jQuery('#redux-footer').height();
	jQuery('#redux-sticky-padder').css({
		height: stickyHeight
	});

	function stickyInfo() {
		var stickyWidth = jQuery('#info_bar').width() - 2;
		if (!jQuery('#info_bar').isOnScreen() && !jQuery('#redux-footer-sticky').isOnScreen()) {
			jQuery('#redux-footer').css({
				position: 'fixed',
				bottom: '0',
				width: stickyWidth
			});
			jQuery('#redux-footer').addClass('sticky-footer-fixed');
			jQuery('#redux-sticky-padder').show();
		} else {
			jQuery('#redux-footer').css({
				background: '#eee',
				position: 'inherit',
				bottom: 'inherit',
				width: 'inherit'
			});
			jQuery('#redux-sticky-padder').hide();
			jQuery('#redux-footer').removeClass('sticky-footer-fixed');
		}
	}

	if (jQuery('#redux-footer').length !== 0) {
		jQuery(window).scroll(function() {
			stickyInfo();
		});
		jQuery(window).resize(function() {
			stickyInfo();
		});
	}

	jQuery('#redux-save, #redux-imported').delay(4000).slideUp();
	jQuery('#redux-field-errors').delay(8000).slideUp();
	jQuery('.redux-save').click(function() {
		window.onbeforeunload = null;
	});
	/**
	 END Sticky footer bar
	 **/

	/**
	 BEGIN dev_mode commands
	 **/
	$('#consolePrintObject').on('click', function() {
		console.log(jQuery.parseJSON(jQuery("#redux-object-json").html()));
	});

	if (typeof jsonView === 'function') {
		jsonView('#redux-object-json', '#redux-object-browser');
	}
	/**
	 END dev_mode commands
	 **/

	/**
	 BEGIN error and warning notices
	 **/
	// Display errors on page load
	if (redux.errors !== undefined) {
		jQuery("#redux-field-errors span").html(redux.errors.total);
		jQuery("#redux-field-errors").show();
		jQuery.each(redux.errors.errors, function(sectionID, sectionArray) {
			jQuery("#" + sectionID + "_section_group_li_a").prepend('<span class="redux-menu-error">' + sectionArray.total + '</span>');
			jQuery("#" + sectionID + "_section_group_li_a").addClass("hasError");
			jQuery.each(sectionArray.errors, function(key, value) {
				//console.log(value);
				jQuery("#" + redux.args.opt_name + '-' + value.id).addClass("redux-field-error");
				jQuery("#" + redux.args.opt_name + '-' + value.id).append('<div class="redux-th-error">' + value.msg + '</div>');
			});
		});
	}
	// Display warnings on page load
	if (redux.warnings !== undefined) {
		jQuery("#redux-field-warnings span").html(redux.warnings.total);
		jQuery("#redux-field-warnings").show();
		jQuery.each(redux.warnings.warnings, function(sectionID, sectionArray) {
			jQuery("#" + sectionID + "_section_group_li_a").prepend('<span class="redux-menu-warning">' + sectionArray.total + '</span>');
			jQuery("#" + sectionID + "_section_group_li_a").addClass("hasWarning");
			jQuery.each(sectionArray.warnings, function(key, value) {
				jQuery("#" + redux.args.opt_name + '-' + value.id).addClass("redux-field-warning");
				jQuery("#" + redux.args.opt_name + '-' + value.id).append('<div class="redux-th-warning">' + value.msg + '</div>');
			});
		});
	}
	/**
	 END error and warning notices
	 **/



	/**
	 BEGIN Control the tabs of the site to the left. Eventually (perhaps) across the top too.
	 **/
		//jQuery( ".redux-section-tabs" ).tabs();
	jQuery('.redux-section-tabs div').hide();
	jQuery('.redux-section-tabs div:first').show();
	jQuery('.redux-section-tabs ul li:first').addClass('active');

	jQuery('.redux-section-tabs ul li a').click(function() {
		jQuery('.redux-section-tabs ul li').removeClass('active');
		jQuery(this).parent().addClass('active');
		var currentTab = $(this).attr('href');
		jQuery('.redux-section-tabs div').hide();
		jQuery(currentTab).fadeIn();
		return false;
	});
	/**
	 END Control the tabs of the site to the left. Eventually (perhaps) across the top too.
	 **/


});
